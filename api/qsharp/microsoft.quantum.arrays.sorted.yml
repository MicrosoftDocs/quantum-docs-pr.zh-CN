### YamlMime:QSharpType
uid: microsoft.quantum.arrays.sorted
name: Sorted
type: function
namespace: microsoft.quantum.arrays
summary: 给定一个数组，返回该数组的元素，这些元素按给定的比较函数排序。
remarks: >-
  假定函数是 `comparison` 可传递的，因此，如果 `comparison(a, b)` 和，则 `comparison(b, c)` `comparison(a, c)` 假定为。 如果此属性不存在，则此函数的输出可能不正确。


  由于这是一个函数，即使两个元素在下被视为相等，结果也完全是确定性的 `comparison` ; 即，当 `comparison(a, b)` 和 `comparison(b, a)` 都是时 `true` 。

  具体而言，此函数执行的排序保证是稳定的，因此，如果中的两个 `a` 元素 `b` 在中按顺序发生 `array` ，并被视为相等 `comparison` ，则在 `a` 输出中也将出现 `b` 在之前。


  例如：


  ```Q#

  function LastDigitLessThanOrEqual(left : Int, right : Int) : Bool {
      return LessThanOrEqualI(
          left % 10, right % 10
      );
  }


  function SortedByLastDigit() : Int[] {
      return Sorted(LastDigitLessThanOrEqual, [3, 37, 11, 17]);
  }

  // returns [11, 3, 37, 17].

  ```
examples: >-
  以下代码片段对整数数组进行排序，按升序排序：


  ```Q#

  let sortedArray = Sorted(LessThanOrEqualI, [3, 17, 11, -201, -11]);

  ```
syntax: "function Sorted (comparison : (('T, 'T) -> Bool), array : 'T[]) : 'T[]"
input:
  content: "(comparison : (('T, 'T) -> Bool), array : 'T[])"
  types:
  - name: comparison
    summary: 比较两个元素的函数，如果为，则将 `a` 其视为小于或等于 `b` `comparison(a, b)` `true` 。
    isFunction: true
    input:
      types:
      - uid: "'T"
        isLocal: true
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Bool
  - name: array
    summary: 要排序的数组。
    isArray: true
    uid: "'T"
    isLocal: true
output:
  content: "'T[]"
  types:
  - isArray: true
    uid: "'T"
    isLocal: true
typeParameters:
- uid: "'T"
  summary: 的每个元素的类型 `array` 。
metadata:
  ms.openlocfilehash: d20fad7286845f21dbb7e609d2bec37ee14adb90
  ms.sourcegitcommit: 685a8ab16d7e6a25e63a168d6e7c385fa6e876cc
  ms.translationtype: MT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 09/29/2020
  ms.locfileid: "91493513"
