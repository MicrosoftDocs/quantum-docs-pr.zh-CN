### YamlMime:QSharpType
uid: microsoft.quantum.amplitudeamplification.standardamplitudeamplification
name: StandardAmplitudeAmplification
type: function
namespace: microsoft.quantum.amplitudeamplification
summary: 标准振幅放大算法
remarks: '这是由所选的反射阶段所获得的标准幅度放大算法，通过 `AmpAmpPhasesStandard` 假定 \Begin{align} A\ket {0} \_ {f} \ket {0} \_ s = \lambda\ket {1} \_ f\ket {\ text {target}} \_ s + \sqrt{1-| \lambda | ^ 2} \ket {0} \_ f\cdots，\End{align} 此操作 {0} \_ 在大多数情况下准备状态 \begin{align} \operatorname{AmpAmpByOracle}\ket {f} \ket {0} \_ s = \Sin ( # B1 2n + 1) \sin ^ {-1} ( \lambda) # A5\ket {1} \_ f\ket {\ text {target}} \_ s + \cdots\ket {0} \_ f \end{align} `flagQubit` `auxiliaryRegister` {0} \_ {0} \_'
syntax: 'function StandardAmplitudeAmplification (nIterations : Int, stateOracle : Microsoft.Quantum.Oracles.StateOracle, idxFlagQubit : Int) : (Qubit[] => Unit is Adj + Ctl)'
references: '- [*G. Brassard，Hoyer，Mosca，Tapp*](https://arxiv.org/abs/quant-ph/0005055)'
input:
  content: '(nIterations : Int, stateOracle : Microsoft.Quantum.Oracles.StateOracle, idxFlagQubit : Int)'
  types:
  - name: nIterations
    summary: $n $ 的幅度放大次数的迭代数
    isPrimitive: true
    uid: Int
  - name: stateOracle
    uid: microsoft.quantum.oracles.stateoracle
  - name: idxFlagQubit
    summary: 用于标记 qubit 的索引
    isPrimitive: true
    uid: Int
output:
  content: (Qubit[] => Unit is Adj + Ctl)
  types:
  - summary: 实现标准振幅放大量程算法的操作
    isOperation: true
    input:
      types:
      - isArray: true
        isPrimitive: true
        uid: Qubit
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
metadata:
  ms.openlocfilehash: f78b541045b309403387962128a3cfda3290cade
  ms.sourcegitcommit: d6ac6f4345be0dd68f1bcd944f44b08e7a3cf346
  ms.translationtype: MT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 09/02/2020
  ms.locfileid: "89341864"
