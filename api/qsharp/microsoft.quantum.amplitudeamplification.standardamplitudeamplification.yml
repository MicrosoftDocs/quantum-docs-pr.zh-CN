### YamlMime:QSharpType
uid: microsoft.quantum.amplitudeamplification.standardamplitudeamplification
name: StandardAmplitudeAmplification
type: function
namespace: Microsoft.Quantum.AmplitudeAmplification
summary: 标准振幅放大算法
remarks: 这是由所选的反射阶段所获得的标准幅度放大算法， `AmpAmpPhasesStandard`通过假定 \begin{align} A\ket{0}\_{f} \ket{0}\_s = \lambda\ket{1}\_f\ket {\ text {target}}\_s + \sqrt{1-| \lambda | ^ 2} \ket{0}\_f\cdots，\end{align} 此操作在大多数情况下准备{0}\_状态 \begin{align} \operatorname{AmpAmpByOracle}\ket {{0}\_f} \ket s = \sin （（2n + 1{-1}） \sin ^ （\lambda{1}\_）） \ket f\ket {\ text {\_target}}{0}\_s + \cdots\ket f \end{align}， `flagQubit`并且`auxiliaryRegister`在{0}\_状态 $ \ket f\ket{0}\_a 中进行初始化。
syntax: 'function StandardAmplitudeAmplification (nIterations : Int, stateOracle : Microsoft.Quantum.Oracles.StateOracle, idxFlagQubit : Int) : (Qubit[] => Unit is Adj + Ctl)'
references: '- [*G. Brassard，Hoyer，Mosca，Tapp*](https://arxiv.org/abs/quant-ph/0005055)'
input:
  content: '(nIterations : Int, stateOracle : Microsoft.Quantum.Oracles.StateOracle, idxFlagQubit : Int)'
  types:
  - name: nIterations
    summary: $n $ 的幅度放大次数的迭代数
    isPrimitive: true
    uid: Int
  - name: stateOracle
    uid: microsoft.quantum.oracles.stateoracle
  - name: idxFlagQubit
    summary: 用于标记 qubit 的索引
    isPrimitive: true
    uid: Int
output:
  content: (Qubit[] => Unit is Adj + Ctl)
  types:
  - summary: 实现标准振幅放大量程算法的操作
    isOperation: true
    input:
      types:
      - isArray: true
        isPrimitive: true
        uid: Qubit
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
metadata:
  ms.openlocfilehash: 0fc7ceb390a64ce6224a084147207663d96c3b75
  ms.sourcegitcommit: db23885adb7ff76cbf8bd1160d401a4f0471e549
  ms.translationtype: MT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 05/01/2020
  ms.locfileid: "82676914"
