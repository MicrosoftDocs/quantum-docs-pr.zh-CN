### YamlMime:QSharpNamespace
uid: microsoft.quantum.preparation
name: Microsoft.Quantum.Preparation
summary: " # <a name=\"summary\"></a>总结\n 此命名空间包含用于将 qubits 准备入任意初始状态的函数和操作。"
functions:
- uid: microsoft.quantum.preparation.blochspherecoordinates
  summary: >-
    计算单一 qubit 状态的 Bloch 球体坐标。


    假设有两个复数 $a 0，a1 $，表示 qubit 状态，计算 Bloch 球上的坐标，使其 $a 0{0} \ket + a1{1} \ket = r e ^ {it} （e ^ {-i \phi/2}\cos{（\ theta/2）}{0}\ket + e ^ {i \phi/2}\sin{（\ theta/2）}{1}\ket） $。
- uid: microsoft.quantum.preparation.quantumrom
  summary: >-
    使用量程 ROM 技术来表示给定的密度矩阵。


    给定一个 $N $ 系数 $ \ alpha_j $ 的列表，这将返回一个单一 $U $，该类型使用量程方法为密度矩阵 $ \rho = \ p_j {j = 0} ^ {N-1} \frac{的 purification {j = 0} ^ {sum_ \tilde\rho\} sum_ \ket{j}\bra{j} ${\ sum_k | \ alpha_k |}\ket{j}\bra{j} $。 在此近似中，错误 $ \epsilon $ 是： $ | p_j-\frac{| alpha_j |}{\ sum_k | \ alpha_k |} |\le \epsilon/N $ 和 $\|\tilde\rho-\rho\| \le \epsilon $。 换句话说，$ $ \begin{align} U\ket{0}^ {\Lceil\ log_2 N\rceil} \ 票证{0}^ {m} = \ sum_ {j = 0} ^ {N-1} \sqrt{p_j} \ket{j}\ket{\text{garbage} _j}。

    \end{align} $ $
- uid: microsoft.quantum.preparation.quantumromqubitcount
  summary: 返回必须分配给返回的操作的 qubits 的总数`QuantumROM`。
- uid: microsoft.quantum.preparation.statepreparationcomplexcoefficients
  summary: >-
    返回准备特定量程状态的操作。


    返回的操作 $U $ 准备带有复数系数的任意量程状态 $ \ket{\psi} $ $r 从 $n $-qubit 计算基础状态 $ \ket{0...0} $ _j e ^ {i t_j} $。


    新分配的寄存器上的 U 操作由 $ $ \begin{align} U\ket {0 ... 0} = \ket{\psi} = \frac{\ sum_ {j = 0} ^ {2 ^ n-1} r_j e ^ {i t_j} \ket{j}}{\sqrt{\ sum_ {j = 0} ^ {2 ^ n-1} | r_j | ^ 2}}。

    \end{align} $ $
- uid: microsoft.quantum.preparation.statepreparationpositivecoefficients
  summary: >-
    返回一个准备给定量程状态的操作。


    返回的操作 $U $ 准备任意量程状态 $ \ket{\psi} $，其中正负系数为 $ \ alpha_j \ge $0，$n $-qubit 计算基础状态 $ \ket{0...0} $。


    新分配的寄存器上的 U 操作是由 $ $ \begin{align} U \ket{0\cdots 0} = \ket{\psi} = \frac{\ sum_ {j = 0} ^ {2 ^ n-1} \ alpha_j \ket{j}}{\sqrt{\ sum_ {j = 0} ^ {2 ^ n-1} | \ alpha_j | ^ 2}}。

    \end{align} $ $
operations:
- uid: microsoft.quantum.preparation.approximatelypreparearbitrarystate
  summary: 给定一组系数和一个小 endian 编码的量程寄存器，就给定系数所描述的那一寄存器的状态进行准备，直到达到给定的近似值。
- uid: microsoft.quantum.preparation.preparearbitrarystate
  summary: 给定一组系数和一个小 endian 编码的量程寄存器，就给定的系数所描述的那个寄存器的状态进行准备。
- uid: microsoft.quantum.preparation.preparechoistate
  summary: 将给定操作的 Choi – Jamiłkowski 状态准备到给定的引用和目标寄存器。
- uid: microsoft.quantum.preparation.preparechoistatea
  summary: 准备具有 adjoint 变体的给定操作的 Choi – Jamiłkowski 状态到给定引用和目标寄存器。
- uid: microsoft.quantum.preparation.preparechoistatec
  summary: 针对给定的引用和目标寄存器，为具有受控变体的给定操作准备 Choi – Jamiłkowski 状态。
- uid: microsoft.quantum.preparation.preparechoistateca
  summary: 为具有受控和 adjoint 变体的给定操作准备 Choi – Jamiłkowski 状态到给定的引用和目标寄存器。
- uid: microsoft.quantum.preparation.prepareentangledstate
  summary: >-
    成对 entangles 两个 qubit 寄存器。


    也就是说，给定两个寄存器，在各自的寄存器上的每{1}对 \left{2}之间准备最大化放大{00} state ${11} \frac {\sqrt} \ket （\ket + \right qubits） $，假设每个注册都以 $ \ket{0\cdots 0} $ 状态启动。
- uid: microsoft.quantum.preparation.prepareidentity
  summary: >-
    在给定寄存器的情况下，准备在最大化 mixed 状态下进行注册。


    在 $ \boldone/2 ^ N $ 状态下注册注册，方法是将完整的 depolarizing 通道应用于每个 qubit，其中 $N $ 是寄存器的长度。
- uid: microsoft.quantum.preparation.preparequbit
  summary: >-
    准备给定 Pauli 运算符的 + 1 （`Zero`） eigenstate 中的 qubit。

    如果给定标识运算符，则 qubit 在最大化混合状态下准备就绪。


    如果 qubit 最初处于 $ \ket{0}$ 状态，则此操作将在给定 Pauli 运算符的 $ + $1 eigenstate 中准备 qubit，或在最大化混合状态下`PauliI`为（请参见<xref:microsoft.quantum.preparation.preparesinglequbitidentity>）。


    如果 qubit 的状态不是 $ \ket{0}$，此操作将应用以下入口： $H $ for `PauliX`、$HS $ for `PauliY`、$I $ for `PauliZ`和。 <xref:microsoft.quantum.preparation.preparesinglequbitidentity> `PauliI`
- uid: microsoft.quantum.preparation.preparesinglequbitidentity
  summary: >-
    准备处于最大化混合状态的 qubit。


    它通过应用 depolarizing 通道 $ $ \begin{align} \Omega （\rho） \mathrel{，在 $ \boldone/$2 状态中准备给定的 qubit： =} \frac{1} {4} \ sum_ {\mu \in \{0，1，2，3\}} \sigma\_{\mu} \rho \sigma\_{\mu} ^ {\dagger}，\end{align} $ $，其中 $\_\sigma i $ 是 $i $ th Pauli 运算符，其中 $ \rho $ 是表示混合状态的密度运算符。
- uid: microsoft.quantum.preparation.prepareuniformsuperposition
  summary: >-
    创建对 superposition 进行编码的状态为0的`nIndices`统一。


    也就是说，在给定输入状态 $ \ket{0\cdots 0} $ 的情况下，此单一 $U $ 将在所有数字状态 $0 $ 到 $M-$1 上创建一个统一的 superposition。 换句话说，$ $ \begin{align} U\ket{0}= \Frac{1}{\sqrt{m}}\ sum_ {j = 0} ^ {M-1} \ket{j}。

    \end{align} $ $。
metadata:
  ms.openlocfilehash: 25ebe80b64af0cfd50e5a32c1ef91f8a299cef04
  ms.sourcegitcommit: db23885adb7ff76cbf8bd1160d401a4f0471e549
  ms.translationtype: MT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 05/01/2020
  ms.locfileid: "82673091"
