### YamlMime:QSharpType
uid: microsoft.quantum.preparation.preparechoistate
name: PrepareChoiState
type: operation
namespace: Microsoft.Quantum.Preparation
summary: 将给定操作的 Choi – Jamiłkowski 状态准备到给定的引用和目标寄存器。
remarks: 量程进程的 Choi – Jamiłkowski 状态 $J （\Lambda） $ 定义为 $ $ \begin{align} J （\Lambda） \mathrel{： =} （\boldone \otimes \Lambda）（| \boldone\rangle\!\rangle\langle\!\langle\boldone |），\end{align} $ $ where $ |X\rangle\!\rangle $ 是列堆栈约定中的矩阵 $X $ 的*矢量化*。 了解此状态的传统说明会提供有关 $ \Lambda $ 对任意输入状态的影响的完整信息，并构成*量程进程 tomography*的基础。
syntax: 'operation PrepareChoiState (op : (Qubit[] => Unit), reference : Qubit[], target : Qubit[]) : Unit'
input:
  content: '(op : (Qubit[] => Unit), reference : Qubit[], target : Qubit[])'
  types:
  - name: op
    summary: 操作 $ \Lambda $，其 Choi – Jamiłkowski 状态 $J （\Lambda）/2 ^ N $ 准备好，其中 $N $ 是 `op` 作用于的 qubits 的数目。
    isOperation: true
    input:
      types:
      - isArray: true
        isPrimitive: true
        uid: Qubit
    output:
      types:
      - isPrimitive: true
        uid: Unit
  - name: reference
    summary: 以 $ \ket{00\cdots 0} $ 状态开头的 qubits 的寄存器，用作 `op`操作的参考。
    isArray: true
    isPrimitive: true
    uid: Qubit
  - name: target
    summary: 最初在 $ \ket{00\cdots 0} $ 状态的 qubits 的寄存器，将在其上应用 `op`。
    isArray: true
    isPrimitive: true
    uid: Qubit
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
seeAlso:
- preparechoistatea
- preparechoistatec
- preparechoistateca
metadata:
  ms.openlocfilehash: f1f0ea6233d13ce1850b3b8dfb210ab6b0e378f8
  ms.sourcegitcommit: edcf15044d7bdf4f8b21fb8f6af4bde475eb13a0
  ms.translationtype: MT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 11/05/2019
  ms.locfileid: "73228114"
