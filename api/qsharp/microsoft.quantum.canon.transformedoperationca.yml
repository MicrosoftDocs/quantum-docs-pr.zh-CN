### YamlMime:QSharpType
uid: microsoft.quantum.canon.transformedoperationca
name: TransformedOperationCA
type: function
namespace: microsoft.quantum.canon
summary: 给定一个函数和一个操作，返回一个新的操作，其输入由给定函数转换。
examples: >-
  以下调用使用 @"Microsoft.Quantum.Arithmetic.LittleEndianAsBigEndian" 将为输入设计的操作转换 @"Microsoft.Quantum.Arithmetic.BigEndian" 为接受类型为的输入的操作 @"Microsoft.Quantum.Arithmetic.LittleEndian" ：


  ```qsharp

  let leOp = TransformedOperation(LittleEndianAsBigEndian, ApplyXorInPlaceBE);

  ```
syntax: "function TransformedOperationCA (fn : ('U -> 'T), op : ('T => Unit is Adj + Ctl)) : ('U => Unit is Adj + Ctl)"
input:
  content: "(fn : ('U -> 'T), op : ('T => Unit is Adj + Ctl))"
  types:
  - name: fn
    summary: 将给定输入转换为操作所需的格式的函数。
    isFunction: true
    input:
      types:
      - uid: "'U"
        isLocal: true
    output:
      types:
      - uid: "'T"
        isLocal: true
  - name: op
    summary: 要转换的操作。
    isOperation: true
    input:
      types:
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
output:
  content: ('U => Unit is Adj + Ctl)
  types:
  - summary: 新操作 tbat 的 `fn` 输入调用，然后将结果输出传递给 `op` 。
    isOperation: true
    input:
      types:
      - uid: "'U"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
seeAlso:
- transformedoperation
- transformedoperationa
- transformedoperationca
- applywithinputtransformation
- compose
metadata:
  ms.openlocfilehash: 0bbd9d2f84d8dbb5121a10f81ca2ef1546d9bde5
  ms.sourcegitcommit: d6ac6f4345be0dd68f1bcd944f44b08e7a3cf346
  ms.translationtype: MT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 09/02/2020
  ms.locfileid: "89354903"
