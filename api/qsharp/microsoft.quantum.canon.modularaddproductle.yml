### YamlMime:QSharpType
uid: microsoft.quantum.canon.modularaddproductle
name: ModularAddProductLE
type: operation
namespace: Microsoft.Quantum.Canon
summary: >-
  > [!WARNING]

  > 已放弃


  请使用 @"Microsoft.Quantum.Arithmetic.MultiplyAndAddByModularInteger"。
syntax: 'operation ModularAddProductLE (constMultiplier : Int, modulus : Int, multiplier : Microsoft.Quantum.Arithmetic.LittleEndian, summand : Microsoft.Quantum.Arithmetic.LittleEndian) : Unit'
input:
  content: '(constMultiplier : Int, modulus : Int, multiplier : Microsoft.Quantum.Arithmetic.LittleEndian, summand : Microsoft.Quantum.Arithmetic.LittleEndian)'
  types:
  - name: constMultiplier
    isPrimitive: true
    uid: Int
  - name: modulus
    isPrimitive: true
    uid: Int
  - name: multiplier
    uid: microsoft.quantum.arithmetic.littleendian
  - name: summand
    uid: microsoft.quantum.arithmetic.littleendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
ms.openlocfilehash: ae27fffa7b14b711557ba5bb63dcf0cd1be9622d
ms.sourcegitcommit: 8becfb03eb60ba205c670a634ff4daa8071bcd06
ms.translationtype: MT
ms.contentlocale: zh-CN
ms.lasthandoff: 10/31/2019
ms.locfileid: "73225870"
