### YamlMime:QSharpType
uid: microsoft.quantum.canon.applyif
name: ApplyIf
type: operation
namespace: microsoft.quantum.canon
summary: >-
  应用可在传统上使用的操作。


  给定一个操作 `op` 和一个位值 `bit` 后， `op` 如果为，则应用于 `target` `bit` `true` 。 如果 `false` 为，则不会发生任何事情 `target` 。
examples: >-
  下面的 qubits 将注册为一个计算基础状态，该状态由给定为值数组的传统位字符串表示 `Bool` ：


  ```Q#

  let bitstring = [true, false, true];

  using (register = Qubit(3)) {
      ApplyToEach(ApplyIf(X, _, _), Zipped(bitstring, register));
      // register should now be in the state |101⟩.
      ...
  }

  ```
syntax: "operation ApplyIf (op : ('T => Unit), bit : Bool, target : 'T) : Unit"
input:
  content: "(op : ('T => Unit), bit : Bool, target : 'T)"
  types:
  - name: op
    summary: 要有条件地应用的操作。
    isOperation: true
    input:
      types:
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
  - name: bit
    summary: 用于控制是否应用 op 的布尔值。
    isPrimitive: true
    uid: Bool
  - name: target
    summary: 将操作应用到的输入。
    uid: "'T"
    isLocal: true
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
typeParameters:
- uid: "'T"
  summary: 要有条件地应用的操作的输入类型。
seeAlso:
- microsoft.quantum.canon.applyifc
- microsoft.quantum.canon.applyifa
- microsoft.quantum.canon.applyifca
metadata:
  ms.openlocfilehash: 70c63cb7a7e7f1818a2961825ca14309360eb225
  ms.sourcegitcommit: 685a8ab16d7e6a25e63a168d6e7c385fa6e876cc
  ms.translationtype: MT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 09/29/2020
  ms.locfileid: "91473371"
