### YamlMime:QSharpType
uid: microsoft.quantum.arrays.windows
name: Windows
type: function
namespace: microsoft.quantum.arrays
summary: >-
  返回子的所有连续的 `size` 。


  此函数 `n - size + 1` 按顺序返回所有长度的子 `size` ，其中 `n` 是的长度 `arr` 。

  第一个子 `arr[0..size - 1], arr[1..size], arr[2..size + 1]` 一直为最后一个子数组 `arr[n - size..n - 1]` 。


  如果为 `size <= 0` 或 `size > n` ，则返回空数组。
examples: >-
  ```Q#

  // same as [[1, 2, 3], [2, 3, 4], [3, 4, 5]]

  let windows = Windows(3, [1, 2, 3, 4, 5]);

  ```
syntax: "function Windows (size : Int, array : 'T[]) : 'T[][]"
input:
  content: "(size : Int, array : 'T[])"
  types:
  - name: size
    summary: 子的长度。
    isPrimitive: true
    uid: Int
  - name: array
    summary: 元素的数组。
    isArray: true
    uid: "'T"
    isLocal: true
output:
  content: "'T[][]"
  types:
  - isArray: true
    types:
    - isArray: true
      uid: "'T"
      isLocal: true
typeParameters:
- uid: "'T"
  summary: 元素的类型 `array` 。
metadata:
  ms.openlocfilehash: 5b16c24f608e8df853f8bdf141b45ab8cd4b3469
  ms.sourcegitcommit: 685a8ab16d7e6a25e63a168d6e7c385fa6e876cc
  ms.translationtype: MT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 09/29/2020
  ms.locfileid: "91493432"
