### YamlMime:QSharpNamespace
functions:
- summary: >-
    计算单一 qubit 状态的 Bloch 球体坐标。

    假设有两个复数 $a 0，a1 $，表示 qubit 状态，计算 Bloch 球上的坐标，使 $a 0 \ket {0} + a1 \ket {1} = r e ^ {it} (e ^ {-i \phi/2}\cos{ ( \ theta/2) } \ket {0} + e ^ {i \phi/2}\sin{ ( \ theta/2) } \ket {1}) $。
  uid: Microsoft.Quantum.Preparation.BlochSphereCoordinates
- summary: >-
    使用量程 ROM 技术来表示给定的密度矩阵。

    给定一个 $N $ 系数 $ \ alpha_j $ 的列表，这将返回一个单一 $U $，该类型使用量程方法为密度矩阵 $ \rho = \ p_j {j = 0} ^ {N-1} \frac{的 purification {j = 0} ^ {sum_ \tilde\rho\} sum_ \ket{j}\bra{j} ${\ sum_k | \ alpha_k |}\ket{j}\bra{j} $。 在此近似中，错误 $ \epsilon $ 是： $ | p_j-\frac{| alpha_j |}{\ sum_k | \ alpha_k |} |\le \epsilon/N $ 和 $ \| \tilde\rho-\rho \| \le \epsilon $。 换句话说，$ $ \begin{align} U\ket {0} ^ {\lceil\ log_2 N\rceil} \ 票证 {0} ^ {m} = \ sum_ {j = 0} ^ {N-1} \sqrt{p_j} \ket{j}\ket{\text{garbage} _j}。 \end{align} $ $
  uid: Microsoft.Quantum.Preparation.QuantumROM
- summary: ''
  uid: Microsoft.Quantum.Preparation.QuantumROMBitStringWriterByIndex
- summary: 返回必须分配给返回的操作的 qubits 的总数 `QuantumROM` 。
  uid: Microsoft.Quantum.Preparation.QuantumROMQubitCount
- summary: ''
  uid: Microsoft.Quantum.Preparation.RangeLength
- summary: ''
  uid: Microsoft.Quantum.Preparation.RoundedDiscretizationCoefficients
- summary: >-
    返回准备特定量程状态的操作。

    返回的操作 $U $ 准备带有复数系数的任意量程状态 $ \ket{\psi} $ $r 从 $n $-qubit 计算基础状态 $ \ket{0...0} $ _j e ^ {i t_j} $。

    新分配的寄存器上的 U 操作由 $ $ \begin{align} U\ket {0 ... 0} = \ket{\psi} = \frac{\ sum_ {j = 0} ^ {2 ^ n-1} r_j e ^ {i t_j} \ket{j}}{\sqrt{\ sum_ {j = 0} ^ {2 ^ n-1} | r_j | ^ 2}}。 \end{align} $ $
  uid: Microsoft.Quantum.Preparation.StatePreparationComplexCoefficients
- summary: >-
    返回一个准备给定量程状态的操作。

    返回的操作 $U $ 准备任意量程状态 $ \ket{\psi} $，其中正负系数为 $ \ alpha_j \ge $0，$n $-qubit 计算基础状态 $ \ket{0...0} $。

    新分配的寄存器上的 U 操作是由 $ $ \begin{align} U \ket{0\cdots 0} = \ket{\psi} = \frac{\ sum_ {j = 0} ^ {2 ^ n-1} \ alpha_j \ket{j}}{\sqrt{\ sum_ {j = 0} ^ {2 ^ n-1} | \ alpha_j | ^ 2}}。 \end{align} $ $
  uid: Microsoft.Quantum.Preparation.StatePreparationPositiveCoefficients
- summary: 任意状态准备过程的实现步骤。
  uid: Microsoft.Quantum.Preparation._ApproximatelyUnprepareArbitraryStatePlan
- summary: ''
  uid: Microsoft.Quantum.Preparation._CompileApproximateArbitraryStatePreparation
- summary: ''
  uid: Microsoft.Quantum.Preparation._QuantumROMDiscretization
- summary: ''
  uid: Microsoft.Quantum.Preparation._QuantumROMQubitManager
- summary: 任意状态准备过程的实现步骤。
  uid: Microsoft.Quantum.Preparation._StatePreparationSBMComputeCoefficients
name: Microsoft.Quantum.Preparation
newtypes: []
operations:
- summary: ''
  uid: Microsoft.Quantum.Preparation.ApplyGlobalRotationStep
- summary: ''
  uid: Microsoft.Quantum.Preparation.ApplyMultiplexStep
- summary: 将操作应用于生成小 endian 寄存器的基础 qubits。 此操作被标记为内部，因为小 endian 寄存器旨在 "不透明"，因此这只是实现详细信息。
  uid: Microsoft.Quantum.Preparation.ApplyToLittleEndian
- summary: 给定一组系数和一个小 endian 编码的量程寄存器，就给定系数所描述的那一寄存器的状态进行准备，直到达到给定的近似值。
  uid: Microsoft.Quantum.Preparation.ApproximatelyPrepareArbitraryState
- summary: 给定一组系数和一个小 endian 编码的量程寄存器，就给定的系数所描述的那个寄存器的状态进行准备。
  uid: Microsoft.Quantum.Preparation.PrepareArbitraryState
- summary: 将给定操作的 Choi – Jamiłkowski 状态准备到给定的引用和目标寄存器。
  uid: Microsoft.Quantum.Preparation.PrepareChoiState
- summary: 准备具有 adjoint 变体的给定操作的 Choi – Jamiłkowski 状态到给定引用和目标寄存器。
  uid: Microsoft.Quantum.Preparation.PrepareChoiStateA
- summary: 针对给定的引用和目标寄存器，为具有受控变体的给定操作准备 Choi – Jamiłkowski 状态。
  uid: Microsoft.Quantum.Preparation.PrepareChoiStateC
- summary: 为具有受控和 adjoint 变体的给定操作准备 Choi – Jamiłkowski 状态到给定的引用和目标寄存器。
  uid: Microsoft.Quantum.Preparation.PrepareChoiStateCA
- summary: >-
    成对 entangles 两个 qubit 寄存器。

    也就是说，假设有两个寄存器，则准备最大化放大 state $ \frac {1} {\sqrt {2} } \left ( \ket {00} + \ket \right 在 {11} 各自寄存器上的每对 qubits 之间) $，假设每个注册都以 $ \ket{0\cdots 0} $ 状态启动。
  uid: Microsoft.Quantum.Preparation.PrepareEntangledState
- summary: >-
    在给定寄存器的情况下，准备在最大化 mixed 状态下进行注册。

    在 $ \boldone/2 ^ N $ 状态下注册注册，方法是将完整的 depolarizing 通道应用于每个 qubit，其中 $N $ 是寄存器的长度。
  uid: Microsoft.Quantum.Preparation.PrepareIdentity
- summary: ''
  uid: Microsoft.Quantum.Preparation.PrepareQuantumROMState
- summary: >-
    准备 + 1 (`Zero` 给定 Pauli 运算符) eigenstate 中的 qubit。 如果给定标识运算符，则 qubit 在最大化混合状态下准备就绪。

    如果 qubit 最初处于 $ \ket {0} $ 状态，则此操作将在给定 Pauli 运算符的 $ + $1 eigenstate 中准备 qubit，或者，对于 `PauliI` 最大化 mixed 状态下的 (参阅 <xref:microsoft.quantum.preparation.preparesinglequbitidentity>) 。

    如果 qubit 的状态不是 $ \ket {0} $，此操作将应用以下入口： $H $ for、 `PauliX` $HS $ for `PauliY` 、$I $ for `PauliZ` 和 <xref:microsoft.quantum.preparation.preparesinglequbitidentity> `PauliI` 。
  uid: Microsoft.Quantum.Preparation.PrepareQubit
- summary: >-
    准备处于最大化混合状态的 qubit。

    它通过应用 depolarizing 通道 $ $ \begin{align} \Omega ( \rho) \mathrel{，在 $ \boldone/$2 状态中准备给定的 qubit： =} \frac {1} {4} \ sum_ {\mu \in \{ 0，1，2，3 \} } \sigma \_ {\mu} \rho \sigma \_ {\mu} ^ {\dagger}，\end{align} $ $，其中 $ \sigma \_ i $ 是 $i $ th Pauli 运算符，其中 $ \rho $ 是表示混合状态的密度运算符。
  uid: Microsoft.Quantum.Preparation.PrepareSingleQubitIdentity
- summary: >-
    创建对 superposition 进行编码的状态为0的统一 `nIndices - 1` 。

    也就是说，在给定输入状态 $ \ket{0\cdots 0} $ 的情况下，此单一 $U $ 将在所有数字状态 $0 $ 到 $M-$1 上创建一个统一的 superposition。 换句话说，$ $ \begin{align} U\ket {0} = \frac {1} {\sqrt{m}}\ sum_ {j = 0} ^ {M-1} \ket{j}。 \end{align} $ $。
  uid: Microsoft.Quantum.Preparation.PrepareUniformSuperposition
- summary: 的实现步骤 <xref:microsoft.quantum.canon.prepareuniformsuperposition>
  uid: Microsoft.Quantum.Preparation.PrepareUniformSuperposition_
- summary: ''
  uid: Microsoft.Quantum.Preparation.WriteQuantumROMBitString
summary: 此命名空间包含用于将 qubits 准备入任意初始状态的函数和操作。
uid: Microsoft.Quantum.Preparation
metadata:
  ms.openlocfilehash: f8dc07d5fe1073f626eea41e6291d8cc919d93b6
  ms.sourcegitcommit: 29e0d88a30e4166fa580132124b0eb57e1f0e986
  ms.translationtype: MT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 10/27/2020
  ms.locfileid: "92700532"
