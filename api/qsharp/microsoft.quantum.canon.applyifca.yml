### YamlMime:QSharpType
uid: microsoft.quantum.canon.applyifca
name: ApplyIfCA
type: operation
namespace: Microsoft.Quantum.Canon
summary: >-
  应用在传统上有条件的单一操作。


  给定一个操作 `op` 并且位值 `bit`，如果 `bit` `true`，则将 `op` 应用于 `target`。 如果 `false`，则 `target`不会执行任何操作。

  后缀 `CA` 指示要应用的操作为单一（可控和 adjointable）。
examples: >-
  下面的内容将 qubits 注册为一个计算基础状态，该状态由给定作为 `Bool` 值数组的传统位字符串表示：


  ```Q#

  let bitstring = [true, false, true];

  using (register = Qubit(3)) {
      ApplyToEach(ApplyIf(X, _, _), Zip(bitstring, register));
      // register should now be in the state |101⟩.
      ...
  }

  ```
syntax: "operation ApplyIfCA (op : ('T => Unit is Ctl + Adj), bit : Bool, target : 'T) : Unit"
input:
  content: "(op : ('T => Unit is Ctl + Adj), bit : Bool, target : 'T)"
  types:
  - name: op
    summary: 要有条件地应用的操作。
    isOperation: true
    input:
      types:
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
  - name: bit
    summary: 用于控制是否应用 op 的布尔值。
    isPrimitive: true
    uid: Bool
  - name: target
    summary: 将操作应用到的输入。
    uid: "'T"
    isLocal: true
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
typeParameters:
- uid: "'T"
  summary: 要有条件地应用的操作的输入类型。
functors:
- Adjoint
- Controlled
seeAlso:
- microsoft.quantum.canon.applyifc
- microsoft.quantum.canon.applyifa
- microsoft.quantum.canon.applyifca
metadata:
  ms.openlocfilehash: c78136688111a71e6a9a58972c9b9bb71603e0cf
  ms.sourcegitcommit: edcf15044d7bdf4f8b21fb8f6af4bde475eb13a0
  ms.translationtype: MT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 11/05/2019
  ms.locfileid: "73213749"
