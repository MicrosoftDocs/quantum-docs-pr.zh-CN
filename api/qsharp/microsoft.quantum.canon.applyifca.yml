### YamlMime:QSharpType
uid: microsoft.quantum.canon.applyifca
name: ApplyIfCA
type: operation
namespace: microsoft.quantum.canon
summary: >-
  应用在传统上有条件的单一操作。


  给定一个操作 `op` 和一个位值 `bit` 后， `op` 如果为，则应用于 `target` `bit` `true` 。 如果 `false` 为，则不会发生任何事情 `target` 。

  后缀 `CA` 指示要应用的操作是单一 (可控和 adjointable) 。
examples: >-
  下面的 qubits 将注册为一个计算基础状态，该状态由给定为值数组的传统位字符串表示 `Bool` ：


  ```Q#

  let bitstring = [true, false, true];

  using (register = Qubit(3)) {
      ApplyToEach(ApplyIf(X, _, _), Zip(bitstring, register));
      // register should now be in the state |101⟩.
      ...
  }

  ```
syntax: "operation ApplyIfCA (op : ('T => Unit is Ctl + Adj), bit : Bool, target : 'T) : Unit"
input:
  content: "(op : ('T => Unit is Ctl + Adj), bit : Bool, target : 'T)"
  types:
  - name: op
    summary: 要有条件地应用的操作。
    isOperation: true
    input:
      types:
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
  - name: bit
    summary: 用于控制是否应用 op 的布尔值。
    isPrimitive: true
    uid: Bool
  - name: target
    summary: 将操作应用到的输入。
    uid: "'T"
    isLocal: true
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
typeParameters:
- uid: "'T"
  summary: 要有条件地应用的操作的输入类型。
functors:
- Adjoint
- Controlled
seeAlso:
- microsoft.quantum.canon.applyifc
- microsoft.quantum.canon.applyifa
- microsoft.quantum.canon.applyifca
metadata:
  ms.openlocfilehash: 2d341b8628c8d81fddd480bf47324041d575f1e5
  ms.sourcegitcommit: d6ac6f4345be0dd68f1bcd944f44b08e7a3cf346
  ms.translationtype: MT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 09/02/2020
  ms.locfileid: "89350500"
