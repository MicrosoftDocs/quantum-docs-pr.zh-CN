### YamlMime:QSharpType
uid: microsoft.quantum.arrays.filtered
name: Filtered
type: function
namespace: Microsoft.Quantum.Arrays
summary: 给定为数组元素定义的数组和谓词后，将返回一个数组，其中包含满足谓词的元素。
remarks: 函数是为泛型类型定义的，也就是说，只要有数组 `'T[]` 和谓词 `'T -> Bool` 我们就可以筛选元素。
examples: >-
  下面的代码演示 "筛选的" 函数。

  使用 @"microsoft.quantum.logical.greaterthani" 函数定义谓词：


  ```qsharp

  open Microsoft.Quantum.Arrays;

  open Microsoft.Quantum.Logical;


  function FilteredDemo() : Unit {
     let predicate = GreaterThanI(_, 5);
     let filteredArray = Filtered(predicate, [2, 5, 9, 1, 8]);
     Message($"{filteredArray}");
  }

  ```


  此示例应有的结果是一个大于5的数字数组。
syntax: "function Filtered (predicate : ('T -> Bool), array : 'T[]) : 'T[]"
input:
  content: "(predicate : ('T -> Bool), array : 'T[])"
  types:
  - name: predicate
    summary: 一个函数，从 `'T` 到用于筛选元素的布尔值。
    isFunction: true
    input:
      types:
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Bool
  - name: array
    summary: "`'T`上的元素的数组。"
    isArray: true
    uid: "'T"
    isLocal: true
output:
  content: "'T[]"
  types:
  - summary: 满足谓词的元素 `'T[]` 数组。
    isArray: true
    uid: "'T"
    isLocal: true
typeParameters:
- uid: "'T"
  summary: '`array` 元素的类型。'
metadata:
  ms.openlocfilehash: 8ce7f84c2243a5194b5a2223884fb68304767dbf
  ms.sourcegitcommit: a0e50c5f07841b99204c068cf5b5ec8ed087ffea
  ms.translationtype: MT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 03/26/2020
  ms.locfileid: "80320755"
