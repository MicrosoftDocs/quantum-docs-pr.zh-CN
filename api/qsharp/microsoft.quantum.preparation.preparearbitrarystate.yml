### YamlMime:QSharpType
uid: microsoft.quantum.preparation.preparearbitrarystate
name: PrepareArbitraryState
type: operation
namespace: Microsoft.Quantum.Preparation
summary: >-
  返回一个准备给定量程状态的操作。


  返回的操作 $U $ 准备具有复杂系数的任意量程状态 $ \ket{\psi} $，$r $n $-qubit 计算基础状态 $ \ket{0...0} $。


  $ $ \begin{align} U\ket {0 ... 0} = \ket{\psi} = \frac{\sum_{j = 0} ^ {2 ^ n-1} r_j e ^ {i t_j} \ket{j}}{\sqrt{\sum_{j = 0} ^ {2 ^ n-1} | r_j | ^ 2}}。

  \end{align} $ $
remarks: 负的输入系数 $r _j < $0 将被视为具有值 $ | r_j | $ 的正值。 如果指定的元素为 $ （r_j，t_j） = （0.0，0.0） $，则将填充 `coefficients`。
syntax: 'operation PrepareArbitraryState (coefficients : Microsoft.Quantum.Math.ComplexPolar[], qubits : Microsoft.Quantum.Arithmetic.LittleEndian) : Unit'
references: '- 量程逻辑电路的合成 Vivek Shende、Stephen Bullock、Igor Markov https://arxiv.org/abs/quant-ph/0406176'
input:
  content: '(coefficients : Microsoft.Quantum.Math.ComplexPolar[], qubits : Microsoft.Quantum.Arithmetic.LittleEndian)'
  types:
  - name: coefficients
    summary: 由其绝对值和相位 $ （r_j，t_j） $ 表示的最大值为 $ 2 ^ n $ 复数系数的数组。 $J $ th 用于索引以小字节序格式编码的数字状态 $ \ket{j} $。
    isArray: true
    uid: microsoft.quantum.math.complexpolar
  - name: qubits
    summary: Qubit 寄存器编码号状态（以小字节序格式）。 这应在计算基础状态 $ \ket{0...0} $ 中进行初始化。
    uid: microsoft.quantum.arithmetic.littleendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
metadata:
  ms.openlocfilehash: f2b26a890fbe9f24f773ae5753cccaf40173d750
  ms.sourcegitcommit: edcf15044d7bdf4f8b21fb8f6af4bde475eb13a0
  ms.translationtype: MT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 11/05/2019
  ms.locfileid: "73228148"
