### YamlMime:QSharpType
uid: microsoft.quantum.canon.multiplexpauli
name: MultiplexPauli
type: operation
namespace: Microsoft.Quantum.Canon
summary: >-
  对 qubits 数组应用 Pauli 旋转。


  这会将逐控制的单一操作应用 $U $，该操作会按角度 $ \theta_j $ （qubit Pauli $P 运算符）执行旋转，$n $-qubit number state $ \ket{j} $ 控制。


  $U = \sum ^ {2 ^ n-1} _ {j = 0} \ket{j}\bra{j}\otimes e ^ {i P \theta_j} $。
remarks: 如果指定了小于 $ 2 ^ n $ 的元素 $ \theta_j = $0.0，则将填充 `coefficients`。
syntax: 'operation MultiplexPauli (coefficients : Double[], pauli : Pauli, control : Microsoft.Quantum.Arithmetic.LittleEndian, target : Qubit) : Unit'
input:
  content: '(coefficients : Double[], pauli : Pauli, control : Microsoft.Quantum.Arithmetic.LittleEndian, target : Qubit)'
  types:
  - name: coefficients
    summary: 最多 $ 2 ^ n $ 系数 $ \theta_j $ 的数组。 $J $ th 用于索引以小字节序格式编码的数字状态 $ \ket{j} $。
    isArray: true
    isPrimitive: true
    uid: Double
  - name: pauli
    summary: Pauli 运算符 $P $，它确定旋转的轴。
    isPrimitive: true
    uid: Pauli
  - name: control
    summary: $n 以小字节序格式编码数字状态 $ \ket{j} $ 的 qubit 控制寄存器。
    uid: microsoft.quantum.arithmetic.littleendian
  - name: target
    summary: 通过 $e ^ {i P \theta_j} $ 旋转的单个 qubit 寄存器。
    isPrimitive: true
    uid: Qubit
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
metadata:
  ms.openlocfilehash: efc5e1cef8574528eeb124100c4d5f875fc2e0e3
  ms.sourcegitcommit: edcf15044d7bdf4f8b21fb8f6af4bde475eb13a0
  ms.translationtype: MT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 11/05/2019
  ms.locfileid: "73227740"
