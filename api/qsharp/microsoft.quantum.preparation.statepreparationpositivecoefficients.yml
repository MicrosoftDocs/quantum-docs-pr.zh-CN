### YamlMime:QSharpType
uid: microsoft.quantum.preparation.statepreparationpositivecoefficients
name: StatePreparationPositiveCoefficients
type: function
namespace: Microsoft.Quantum.Preparation
summary: >-
  返回一个准备给定量程状态的操作。


  返回的操作 $U $ "从 $n $-qubit 计算基础状态 $ \ket{0...0} $ 准备一个任意量程状态 $ \ket{\psi} $，其中正负系数为 $ \alpha_j\ge $0。


  新分配的寄存器上的 U 操作由 $ $ \begin{align} U \ket{0\cdots 0} = \ket{\psi} = \frac{\sum_{j = 0} ^ {2 ^ n-1} \alpha_j \ket{j}}{\sqrt{\sum_{j = 0} ^ {2 ^ n-1} | \alpha_j | ^ 2}} 提供。

  \end{align} $ $
remarks: 负输入系数 $ \alpha_j < $0 将被视为值为 $ | \alpha_j | $ 的正值。 如果指定了小于 $ 2 ^ n $ 的元素 $ \alpha_j = $0.0，则将填充 `coefficients`。
examples: >-
  以下代码片段在 qubit register `qubitsLE`中准备好量程状态 $ \ket{\psi} = \ sqrt {1/8} \ 票证{0}+ \ sqrt {7/8} \ 票证{2}$。


  ```qsharp

  let amplitudes = [Sqrt(0.125), 0.0, Sqrt(0.875), 0.0];

  let op = StatePreparationPositiveCoefficients(amplitudes);

  using (qubits = Qubit[2]) {
      let qubitsLE = LittleEndian(qubits);
      op(qubitsLE);
  }

  ```
syntax: 'function StatePreparationPositiveCoefficients (coefficients : Double[]) : (Microsoft.Quantum.Arithmetic.LittleEndian => Unit is Adj + Ctl)'
input:
  content: '(coefficients : Double[])'
  types:
  - name: coefficients
    summary: 最多 $ 2 ^ n $ 系数 $ \alpha_j $ 的数组。 $J $ th 用于索引以小字节序格式编码的数字状态 $ \ket{j} $。
    isArray: true
    isPrimitive: true
    uid: Double
output:
  content: (Microsoft.Quantum.Arithmetic.LittleEndian => Unit is Adj + Ctl)
  types:
  - summary: 状态准备单一操作 $U $。
    isOperation: true
    input:
      types:
      - uid: microsoft.quantum.arithmetic.littleendian
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
ms.openlocfilehash: 2a31449781d4b3bab1f2af40083df78bf6cc2083
ms.sourcegitcommit: 8becfb03eb60ba205c670a634ff4daa8071bcd06
ms.translationtype: MT
ms.contentlocale: zh-CN
ms.lasthandoff: 10/31/2019
ms.locfileid: "73226363"
