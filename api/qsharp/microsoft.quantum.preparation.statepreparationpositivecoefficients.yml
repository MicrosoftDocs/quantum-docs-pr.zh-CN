### YamlMime:QSharpType
uid: microsoft.quantum.preparation.statepreparationpositivecoefficients
name: StatePreparationPositiveCoefficients
type: function
namespace: microsoft.quantum.preparation
summary: >-
  返回一个准备给定量程状态的操作。


  返回的操作 $U $ 准备任意量程状态 $ \ket{\psi} $，其中正负系数为 $ \ alpha_j \ge $0，$n $-qubit 计算基础状态 $ \ket{0...0} $。


  新分配的寄存器上的 U 操作是由 $ $ \begin{align} U \ket{0\cdots 0} = \ket{\psi} = \frac{\ sum_ {j = 0} ^ {2 ^ n-1} \ alpha_j \ket{j}}{\sqrt{\ sum_ {j = 0} ^ {2 ^ n-1} | \ alpha_j | ^ 2}}。

  \end{align} $ $
remarks: 负输入系数 $ \ alpha_j < $0 将被视为具有值 $ | \ alpha_j | $ 的正值。 `coefficients` 如果指定少于 $ 2 ^ n $，则将用元素 $ \ alpha_j = $0.0 填充。
examples: >-
  以下代码片段在 qubit 注册中准备好量程状态 $ \ket{\psi} = \ sqrt {1/8} \ 票证 {0} + \ sqrt {7/8} \ 票证 {2} $ `qubitsLE` 。


  ```qsharp

  let amplitudes = [Sqrt(0.125), 0.0, Sqrt(0.875), 0.0];

  let op = StatePreparationPositiveCoefficients(amplitudes);

  using (qubits = Qubit[2]) {
      let qubitsLE = LittleEndian(qubits);
      op(qubitsLE);
  }

  ```
syntax: 'function StatePreparationPositiveCoefficients (coefficients : Double[]) : (Microsoft.Quantum.Arithmetic.LittleEndian => Unit is Adj + Ctl)'
input:
  content: '(coefficients : Double[])'
  types:
  - name: coefficients
    summary: 最多 $ 2 ^ n $ 系数 $ \ alpha_j $ 的数组。 $J $ th 用于索引以小字节序格式编码的数字状态 $ \ket{j} $。
    isArray: true
    isPrimitive: true
    uid: Double
output:
  content: (Microsoft.Quantum.Arithmetic.LittleEndian => Unit is Adj + Ctl)
  types:
  - summary: 状态准备单一操作 $U $。
    isOperation: true
    input:
      types:
      - uid: microsoft.quantum.arithmetic.littleendian
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
metadata:
  ms.openlocfilehash: 7f801c02044195aa2b85bf6fd941923cf474a36b
  ms.sourcegitcommit: d6ac6f4345be0dd68f1bcd944f44b08e7a3cf346
  ms.translationtype: MT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 09/02/2020
  ms.locfileid: "89331222"
