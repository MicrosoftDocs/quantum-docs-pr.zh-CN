### YamlMime:QSharpType
uid: microsoft.quantum.arrays.fold
name: Fold
type: function
namespace: Microsoft.Quantum.Arrays
summary: 通过数组`f` `array`循环访问函数，返回`f(f(f(initialState, array[0]), array[1]), ...)`。
examples: >-
  ```qsharp

  function Plus(a : Double, b : Double) {
      return a + b;
  }

  function Sum(xs : Double[]) {
      return Fold(Plus, 0.0, xs);
  }

  ```
syntax: "function Fold (folder : (('State, 'T) -> 'State), state : 'State, array : 'T[]) : 'State"
input:
  content: "(folder : (('State, 'T) -> 'State), state : 'State, array : 'T[])"
  types:
  - name: folder
    summary: 要在数组上折叠的函数。
    isFunction: true
    input:
      types:
      - uid: "'State"
        isLocal: true
      - uid: "'T"
        isLocal: true
    output:
      types:
      - uid: "'State"
        isLocal: true
  - name: state
    summary: 文件夹的初始状态。
    uid: "'State"
    isLocal: true
  - name: array
    summary: 要折叠的值的数组。
    isArray: true
    uid: "'T"
    isLocal: true
output:
  content: "'State"
  types:
  - summary: 遍历的所有元素后，文件夹返回的最终状态`array`。
    uid: "'State"
    isLocal: true
typeParameters:
- uid: "'State"
  summary: '`folder`函数操作的状态的类型，即接受作为其第一个参数，并返回。'
- uid: "'T"
  summary: '`array`元素的类型。'
metadata:
  ms.openlocfilehash: d02d20c049e8b8d21214028efcd6a647067bf71f
  ms.sourcegitcommit: db23885adb7ff76cbf8bd1160d401a4f0471e549
  ms.translationtype: MT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 05/01/2020
  ms.locfileid: "82676445"
