### YamlMime:QSharpNamespace
uid: microsoft.quantum.canon
name: Microsoft.Quantum.Canon
functions:
- uid: microsoft.quantum.canon.bigendiantolittleendian
  summary: "\n> [!WARNING]\n> 已放弃\n\nBigEndianToLittleEndian 已被弃用。 请改用 @\"microsoft.quantum.arithmetic.bigendianaslittleendian\"。\n请使用 @\"Microsoft.Quantum.Arithmetic.BigEndianAsLittleEndian\"。"
- uid: microsoft.quantum.canon.bound
  summary: 给定针对单个输入的操作数组时，将生成一个按顺序执行每个给定操作的新操作。
- uid: microsoft.quantum.canon.bounda
  summary: >-
    给定针对单个输入的操作数组时，将生成一个按顺序执行每个给定操作的新操作。

    修饰符 `A` 指示数组中的所有操作都是 adjointable。
- uid: microsoft.quantum.canon.boundc
  summary: >-
    给定针对单个输入的操作数组时，将生成一个按顺序执行每个给定操作的新操作。

    修饰符 `C` 指示数组中的所有操作都可控制。
- uid: microsoft.quantum.canon.boundca
  summary: >-
    给定针对单个输入的操作数组时，将生成一个按顺序执行每个给定操作的新操作。

    修饰符 `CA` 指示数组中的所有操作都是 adjointable 且可控制的。
- uid: microsoft.quantum.canon.ccontrolled
  summary: 给定操作 op，返回一个新操作，该操作将应用操作（如果古典控制位为 true）。 如果为，则不 `false` 执行任何操作。
- uid: microsoft.quantum.canon.ccontrolleda
  summary: >-
    给定操作 op，返回一个新操作，该操作将应用操作（如果古典控制位为 true）。 如果为，则不 `false` 执行任何操作。

    修饰符 `A` 指示操作为 adjointable。
- uid: microsoft.quantum.canon.ccontrolledc
  summary: >-
    给定操作 op，返回一个新操作，该操作将应用操作（如果古典控制位为 true）。 如果为，则不 `false` 执行任何操作。

    修饰符 `C` 指示操作可控制。
- uid: microsoft.quantum.canon.ccontrolledca
  summary: >-
    给定操作 op，返回一个新操作，该操作将应用操作（如果古典控制位为 true）。 如果为，则不 `false` 执行任何操作。

    修饰符 `CA` 指示该操作是可控制的且 adjointable。
- uid: microsoft.quantum.canon.compose
  summary: 返回两个函数的组合。
- uid: microsoft.quantum.canon.conjugatedby
  summary: 给定的外部和内部操作返回一个新的操作，该操作将由外部操作词干内部操作。
- uid: microsoft.quantum.canon.conjugatedbya
  summary: 给定的外部和内部操作返回一个新的操作，该操作将由外部操作词干内部操作。
- uid: microsoft.quantum.canon.conjugatedbyc
  summary: 给定的外部和内部操作返回一个新的操作，该操作将由外部操作词干内部操作。
- uid: microsoft.quantum.canon.conjugatedbyca
  summary: 给定的外部和内部操作返回一个新的操作，该操作将由外部操作词干内部操作。
- uid: microsoft.quantum.canon.controlledonbitstring
  summary: 如果控件注册状态对应于指定的位掩码，则返回在目标寄存器上应用 oracle 的单一操作。
- uid: microsoft.quantum.canon.controlledonint
  summary: 如果控件注册状态对应于指定的正整数，则返回一个单一运算符，该运算符应用目标寄存器上的 oracle。
- uid: microsoft.quantum.canon.curriedop
  summary: >-
    返回对两个输入的操作的扩充版本。


    也就是说，假设有一个具有两个输入的操作，则此函数将应用咖喱的 isomorphism $f (x，y) \equiv f (x) # B4 y) $ 以返回一个输入的操作，该操作返回一个输入的操作。
- uid: microsoft.quantum.canon.decomposedintotimestepsca
  summary: 返回为给定操作实现 Trotter – Suzuki 集成器的操作。
- uid: microsoft.quantum.canon.decomposeintotimestepsca
  summary: "\n> [!WARNING]\n> 已放弃\n\nDecomposeIntoTimeStepsCA 已被弃用。 请改用 @\"microsoft.quantum.canon.decomposedintotimestepsca\"。"
- uid: microsoft.quantum.canon.delayed
  summary: 返回应用给定自变量的给定操作的操作。
- uid: microsoft.quantum.canon.delayeda
  summary: 返回应用给定自变量的给定操作的操作。
- uid: microsoft.quantum.canon.delayedc
  summary: 返回应用给定自变量的给定操作的操作。
- uid: microsoft.quantum.canon.delayedca
  summary: 返回应用给定自变量的给定操作的操作。
- uid: microsoft.quantum.canon.embedpauli
  summary: 给定 qubit Pauli 运算符和 qubit 的索引后，将返回一个多 qubit Pauli 运算符，该运算符具有给定的单一 qubit 运算符，位于该索引处和 `PauliI` 其他每个索引处。
- uid: microsoft.quantum.canon.fst
  summary: 给定一对，返回其第一个元素。
- uid: microsoft.quantum.canon.ignore
  summary: 忽略操作或函数的输出。
- uid: microsoft.quantum.canon.isresultone
  summary: 测试给定结果值是否等于 `One` 。
- uid: microsoft.quantum.canon.isresultzero
  summary: 测试给定结果值是否等于 `Zero` 。
- uid: microsoft.quantum.canon.littleendiantobigendian
  summary: "\n> [!WARNING]\n> 已放弃\n\nLittleEndianToBigEndian 已被弃用。 请改用 @\"microsoft.quantum.arithmetic.littleendianasbigendian\"。\n请使用 @\"Microsoft.Quantum.Arithmetic.LittleEndianAsBigEndian\"。"
- uid: microsoft.quantum.canon.multiplexerbruteforcefromgenerator
  summary: >-
    返回 $U $ 的乘法控制的单一操作，该操作将应用单一 $V _j $，由 n qubit number state $ \ket{j} $ 控制。


    $U = \sum ^ {2 ^ n-1} _ {j = 0} \ket{j}\bra{j}\otimes V_j $。
- uid: microsoft.quantum.canon.multiplexerfromgenerator
  summary: >-
    返回 $U $ 的乘法控制的单一操作，该操作将应用单一 $V _j $，由 n qubit number state $ \ket{j} $ 控制。


    $U = \sum ^ {2 ^ n-1} _ {j = 0} \ket{j}\bra{j}\otimes V_j $。
- uid: microsoft.quantum.canon.operationpow
  summary: >-
    引发幂运算。


    也就是说，在给定一个表示入口 $U $ 的操作的情况下，将为 power $m $ $U ^ m $ 返回一个新操作。
- uid: microsoft.quantum.canon.operationpowa
  summary: >-
    引发幂运算。

    修饰符 `A` 指示操作为 adjointable。


    也就是说，在给定一个表示入口 $U $ 的操作的情况下，将为 power $m $ $U ^ m $ 返回一个新操作。
- uid: microsoft.quantum.canon.operationpowc
  summary: >-
    引发幂运算。

    修饰符 `C` 指示操作可控制。


    也就是说，在给定一个表示入口 $U $ 的操作的情况下，将为 power $m $ $U ^ m $ 返回一个新操作。
- uid: microsoft.quantum.canon.operationpowca
  summary: >-
    引发幂运算。

    修饰符 `A` 指示该操作是可控制的且 adjointable。


    也就是说，在给定一个表示入口 $U $ 的操作的情况下，将为 power $m $ $U ^ m $ 返回一个新操作。
- uid: microsoft.quantum.canon.restrictedtosubregister
  summary: 将操作限制为寄存器的索引数组，即，subregister。
- uid: microsoft.quantum.canon.restrictedtosubregistera
  summary: >-
    将操作限制为寄存器的索引数组，即，subregister。

    修饰符 `A` 指示操作为 adjointable。
- uid: microsoft.quantum.canon.restrictedtosubregisterc
  summary: >-
    将操作限制为寄存器的索引数组，即，subregister。

    修饰符 `C` 指示操作可控制。
- uid: microsoft.quantum.canon.restrictedtosubregisterca
  summary: >-
    将操作限制为寄存器的索引数组，即，subregister。

    修饰符 `CA` 指示该操作是可控制的且 adjointable。
- uid: microsoft.quantum.canon.snd
  summary: 如果给定对，则返回第二个元素。
- uid: microsoft.quantum.canon.stackcapacity
  summary: "\n> [!WARNING]\n> 已放弃\n\nStackCapacity 已被弃用。"
- uid: microsoft.quantum.canon.stacklength
  summary: "\n> [!WARNING]\n> 已放弃\n\nStackLength 已被弃用。"
- uid: microsoft.quantum.canon.stacknew
  summary: "\n> [!WARNING]\n> 已放弃\n\nStackNew 已被弃用。"
- uid: microsoft.quantum.canon.stackpeek
  summary: "\n> [!WARNING]\n> 已放弃\n\nStackPeek 已被弃用。"
- uid: microsoft.quantum.canon.stackpop
  summary: "\n> [!WARNING]\n> 已放弃\n\nStackPop 已被弃用。"
- uid: microsoft.quantum.canon.stackpush
  summary: "\n> [!WARNING]\n> 已放弃\n\nStackPush 已被弃用。"
- uid: microsoft.quantum.canon.transformedoperation
  summary: 给定一个函数和一个操作，返回一个新的操作，其输入由给定函数转换。
- uid: microsoft.quantum.canon.transformedoperationa
  summary: 给定一个函数和一个操作，返回一个新的操作，其输入由给定函数转换。
- uid: microsoft.quantum.canon.transformedoperationc
  summary: 给定一个函数和一个操作，返回一个新的操作，其输入由给定函数转换。
- uid: microsoft.quantum.canon.transformedoperationca
  summary: 给定一个函数和一个操作，返回一个新的操作，其输入由给定函数转换。
- uid: microsoft.quantum.canon.uncurriedop
  summary: 给定一个返回操作的函数，返回一个将两个输入作为元组的新操作。
- uid: microsoft.quantum.canon.uncurriedopa
  summary: >-
    给定一个返回操作的函数，返回一个将两个输入作为元组的新操作。

    修饰符 `A` 指示操作是 adjointable 的。
- uid: microsoft.quantum.canon.uncurriedopc
  summary: >-
    给定一个返回操作的函数，返回一个将两个输入作为元组的新操作。

    修饰符 `C` 指示操作可以控制。
- uid: microsoft.quantum.canon.uncurriedopca
  summary: >-
    给定一个返回操作的函数，返回一个将两个输入作为元组的新操作。

    修饰符 `CA` 指示操作可以控制和 adjointable。
- uid: microsoft.quantum.canon.weightonepaulis
  summary: 返回给定数量的 qubits 上的所有 Pauli 运算符的数组。
- uid: microsoft.quantum.canon.xor
  summary: "\n> [!WARNING]\n> 已放弃\n\n不推荐使用 XOR。 请改用 @\"microsoft.quantum.logical.xor\"。\n请使用 @\"microsoft.quantum.logical.xor\"。"
operations:
- uid: microsoft.quantum.canon.andladder
  summary: 在目标 qubits 的寄存器上执行受控的 "AND 阶梯"。
- uid: microsoft.quantum.canon.applyand
  summary: 当且仅当两个控件 qubits 都处于1状态时，使用度量来执行 adjoint 操作，以反转给定的目标 qubit。
- uid: microsoft.quantum.canon.applyccnotchain
  summary: >-
    实现控制在两个 qubit 寄存器的相应位上控制的 CCNOT 入口的层叠，这是在其中一个寄存器的下一个 qubit 上进行的。

    从两个寄存器中的位置0开始，将 CCNOT 应用于目标寄存器的位置1处的 qubit，然后由 qubits 在目标寄存器中的位置2进行控制，在目标 qubits 的位置2处进行控制，以目标 qubit 上的操作结束 `Length(nQubits)-1` 。
- uid: microsoft.quantum.canon.applycnotchain
  summary: 计算 qubits 的寄存器的奇偶校验。
- uid: microsoft.quantum.canon.applycnotchainwithtarget
  summary: 计算 qubits 数组到目标 qubit 的奇偶校验。
- uid: microsoft.quantum.canon.applycontrolledonbitstring
  summary: 对目标寄存器应用单一操作，该操作由给定位掩码指定的状态控制。
- uid: microsoft.quantum.canon.applycontrolledonint
  summary: 如果控件寄存器状态对应于指定的正整数，则对目标寄存器应用单一操作。
- uid: microsoft.quantum.canon.applydiagonalunitary
  summary: 将复杂阶段数组应用于 qubits 寄存器的数字基础状态。
- uid: microsoft.quantum.canon.applyfermionicswap
  summary: 应用 Fermionic 交换。
- uid: microsoft.quantum.canon.applyif
  summary: 应用可在传统上使用的操作。
- uid: microsoft.quantum.canon.applyifa
  summary: 应用以传统位为依据的 adjointable 操作。
- uid: microsoft.quantum.canon.applyifc
  summary: 应用采用传统位的可控操作。
- uid: microsoft.quantum.canon.applyifca
  summary: 应用在传统上有条件的单一操作。
- uid: microsoft.quantum.canon.applyifelseb
  summary: 应用两个操作之一，具体取决于传统位的值。
- uid: microsoft.quantum.canon.applyifelseba
  summary: 应用两个 adjointable 操作之一，具体取决于传统位的值。
- uid: microsoft.quantum.canon.applyifelsebc
  summary: 应用两个可控操作之一，具体取决于传统位的值。
- uid: microsoft.quantum.canon.applyifelsebca
  summary: 应用两个单一操作之一，具体取决于传统位的值。
- uid: microsoft.quantum.canon.applyifelser
  summary: 应用两个操作之一，具体取决于传统结果的值。
- uid: microsoft.quantum.canon.applyifelsera
  summary: 应用两个 adjointable 操作之一，具体取决于古典结果的值。
- uid: microsoft.quantum.canon.applyifelserc
  summary: 应用两个可控操作之一，具体取决于古典结果的值。
- uid: microsoft.quantum.canon.applyifelserca
  summary: 应用两个单一操作中的一个，具体取决于古典结果的值。
- uid: microsoft.quantum.canon.applyifone
  summary: 应用对经典结果值为1的操作。
- uid: microsoft.quantum.canon.applyifonea
  summary: 应用一个 adjointable 操作，该操作可将传统结果值视为1。
- uid: microsoft.quantum.canon.applyifonec
  summary: 应用以传统结果值为一的可控操作。
- uid: microsoft.quantum.canon.applyifoneca
  summary: 将一个条件为的单一操作应用于传统结果值为1的值。
- uid: microsoft.quantum.canon.applyifzero
  summary: 应用对传统结果值为零的操作。
- uid: microsoft.quantum.canon.applyifzeroa
  summary: 应用对经典结果值为零的 adjointable 运算。
- uid: microsoft.quantum.canon.applyifzeroc
  summary: 应用在传统结果值为零的可控操作。
- uid: microsoft.quantum.canon.applyifzeroca
  summary: 应用在传统结果值为零的条件运算。
- uid: microsoft.quantum.canon.applylowdepthand
  summary: 当且仅当两个 control qubits 都处于1状态时，使用 qubit 执行 adjoint 操作时，使用度量来反转给定目标。
- uid: microsoft.quantum.canon.applymulticontrolledc
  summary: >-
    应用单个受控操作的多重控制版本。

    修饰符 `C` 指示 qubit 操作可控制。
- uid: microsoft.quantum.canon.applymulticontrolledca
  summary: >-
    应用单个受控操作的多重控制版本。

    修饰符 `CA` 指示 qubit 操作可控制和 adjointable。
- uid: microsoft.quantum.canon.applyoprepeatedlyover
  summary: 多次对 qubit 寄存器应用相同的操作。
- uid: microsoft.quantum.canon.applyoprepeatedlyovera
  summary: 多次对 qubit 寄存器应用相同的操作。
- uid: microsoft.quantum.canon.applyoprepeatedlyoverc
  summary: 多次对 qubit 寄存器应用相同的操作。
- uid: microsoft.quantum.canon.applyoprepeatedlyoverca
  summary: 多次对 qubit 寄存器应用相同的操作。
- uid: microsoft.quantum.canon.applypauli
  summary: 给定多 qubit Pauli 运算符，将相应的操作应用于寄存器。
- uid: microsoft.quantum.canon.applypaulifrombitstring
  summary: 如果布尔数组的相应位与给定的输入相匹配，则对数组中的每个 qubit 应用 Pauli 运算符。
- uid: microsoft.quantum.canon.applyquantumfouriertransform
  summary: 对包含小 endian 表示形式整数的量程寄存器执行量程傅立叶转换。
- uid: microsoft.quantum.canon.applyreversedopbigendiana
  summary: "\n> [!WARNING]\n> 已放弃\n\nApplyReversedOpBigEndianA 已被弃用。 请改用 @\"microsoft.quantum.arithmetic.applyreversedopbea\"。\n请使用 @\"Microsoft.Quantum.Arithmetic.ApplyReversedOpBEA\"。"
- uid: microsoft.quantum.canon.applyreversedopbigendianc
  summary: "\n> [!WARNING]\n> 已放弃\n\nApplyReversedOpBigEndianC 已被弃用。 请改用 @\"microsoft.quantum.arithmetic.applyreversedopbec\"。\n请使用 @\"Microsoft.Quantum.Arithmetic.ApplyReversedOpBEC\"。"
- uid: microsoft.quantum.canon.applyreversedopbigendianca
  summary: "\n> [!WARNING]\n> 已放弃\n\nApplyReversedOpBigEndianCA 已被弃用。 请改用 @\"microsoft.quantum.arithmetic.applyreversedopbeca\"。\n请使用 @\"Microsoft.Quantum.Arithmetic.ApplyReversedOpBEC\"。"
- uid: microsoft.quantum.canon.applyreversedoplittleendiana
  summary: "\n> [!WARNING]\n> 已放弃\n\nApplyReversedOpLittleEndianA 已被弃用。 请改用 @\"microsoft.quantum.arithmetic.applyreversedoplea\"。\n请使用 @\"Microsoft.Quantum.Arithmetic.ApplyReversedOpLEA\"。"
- uid: microsoft.quantum.canon.applyreversedoplittleendianc
  summary: "\n> [!WARNING]\n> 已放弃\n\nApplyReversedOpLittleEndianC 已被弃用。 请改用 @\"microsoft.quantum.arithmetic.applyreversedoplec\"。\n请使用 @\"Microsoft.Quantum.Arithmetic.ApplyReversedOpLEC\"。"
- uid: microsoft.quantum.canon.applyreversedoplittleendianca
  summary: "\n> [!WARNING]\n> 已放弃\n\nApplyReversedOpLittleEndianCA 已被弃用。 请改用 @\"microsoft.quantum.arithmetic.applyreversedopleca\"。\n请使用 @\"Microsoft.Quantum.Arithmetic.ApplyReversedOpLEC\"。"
- uid: microsoft.quantum.canon.applyripplecarrycomparatorle
  summary: "\n> [!WARNING]\n> 已放弃\n\nApplyRippleCarryComparatorLE 已被弃用。 请改用 @\"microsoft.quantum.arithmetic.compareusingripplecarry\"。\n请使用 @\"Microsoft.Quantum.Arithmetic.CompareUsingRippleCarry\"。"
- uid: microsoft.quantum.canon.applyseriesofops
  summary: 在数组上按顺序应用 ops 及其目标的列表。
- uid: microsoft.quantum.canon.applyseriesofopsa
  summary: '在数组上按顺序应用 ops 及其目标的列表。  (Adjoint) '
- uid: microsoft.quantum.canon.applyseriesofopsc
  summary: '在数组上按顺序应用 ops 及其目标的列表。  (控制) '
- uid: microsoft.quantum.canon.applyseriesofopsca
  summary: '在数组上按顺序应用 ops 及其目标的列表。  (Adjoint + 受控) '
- uid: microsoft.quantum.canon.applytoeach
  summary: 对寄存器中的每个元素应用 qubit 操作。
- uid: microsoft.quantum.canon.applytoeacha
  summary: >-
    对寄存器中的每个元素应用 qubit 操作。

    修饰符 `A` 指示 qubit 操作是 adjointable。
- uid: microsoft.quantum.canon.applytoeachc
  summary: >-
    对寄存器中的每个元素应用 qubit 操作。

    修饰符 `C` 指示 qubit 操作可控制。
- uid: microsoft.quantum.canon.applytoeachca
  summary: >-
    对寄存器中的每个元素应用 qubit 操作。

    修饰符 `CA` 指示 qubit 操作可控制和 adjointable。
- uid: microsoft.quantum.canon.applytoeachindex
  summary: 将单 qubit 操作应用于寄存器中的每个索引元素。
- uid: microsoft.quantum.canon.applytoeachindexa
  summary: >-
    将单 qubit 操作应用于寄存器中的每个索引元素。

    修饰符 `A` 指示 qubit 操作是 adjointable。
- uid: microsoft.quantum.canon.applytoeachindexc
  summary: >-
    将单 qubit 操作应用于寄存器中的每个索引元素。

    修饰符 `C` 指示 qubit 操作可控制。
- uid: microsoft.quantum.canon.applytoeachindexca
  summary: >-
    将单 qubit 操作应用于寄存器中的每个索引元素。

    修饰符 `CA` 指示 qubit 操作是 adjointable 和可控制的。
- uid: microsoft.quantum.canon.applytoelement
  summary: 将操作应用到数组的给定元素。
- uid: microsoft.quantum.canon.applytoelementa
  summary: 将操作应用到数组的给定元素。
- uid: microsoft.quantum.canon.applytoelementc
  summary: 将操作应用到数组的给定元素。
- uid: microsoft.quantum.canon.applytoelementca
  summary: 将操作应用到数组的给定元素。
- uid: microsoft.quantum.canon.applytofirstqubit
  summary: 将操作应用于寄存器中的第一个 qubit。
- uid: microsoft.quantum.canon.applytofirstqubita
  summary: >-
    将操作应用于寄存器中的第一个 qubit。

    修饰符 `A` 指示操作为 adjointable。
- uid: microsoft.quantum.canon.applytofirstqubitc
  summary: >-
    将操作 op 应用于寄存器中的第一个 qubit。

    修饰符 `C` 指示操作可控制。
- uid: microsoft.quantum.canon.applytofirstqubitca
  summary: >-
    将操作 op 应用于寄存器中的第一个 qubit。

    修饰符 `CA` 指示该操作是可控制的且 adjointable。
- uid: microsoft.quantum.canon.applytofirstthreequbits
  summary: 将操作应用于寄存器中的前三个 qubits。
- uid: microsoft.quantum.canon.applytofirstthreequbitsa
  summary: >-
    将操作应用于寄存器中的前三个 qubits。

    修饰符 `A` 指示操作为 adjointable。
- uid: microsoft.quantum.canon.applytofirstthreequbitsc
  summary: >-
    将操作应用于寄存器中的前三个 qubits。

    修饰符 `C` 指示操作可控制。
- uid: microsoft.quantum.canon.applytofirstthreequbitsca
  summary: >-
    将操作应用于寄存器中的前三个 qubits。

    修饰符 `CA` 指示该操作是可控制的且 adjointable。
- uid: microsoft.quantum.canon.applytofirsttwoqubits
  summary: 将操作应用于寄存器中的前两个 qubits。
- uid: microsoft.quantum.canon.applytofirsttwoqubitsa
  summary: >-
    将操作应用于寄存器中的前两个 qubits。

    修饰符 `A` 指示操作为 adjointable。
- uid: microsoft.quantum.canon.applytofirsttwoqubitsc
  summary: >-
    将操作应用于寄存器中的前两个 qubits。

    修饰符 `C` 指示操作可控制。
- uid: microsoft.quantum.canon.applytofirsttwoqubitsca
  summary: >-
    将操作应用于寄存器中的前两个 qubits。

    修饰符 `CA` 指示该操作是可控制的且 adjointable。
- uid: microsoft.quantum.canon.applytohead
  summary: 将操作应用到数组的第一个元素。
- uid: microsoft.quantum.canon.applytoheada
  summary: 将操作应用到数组的第一个元素。
- uid: microsoft.quantum.canon.applytoheadc
  summary: 将操作应用到数组的第一个元素。
- uid: microsoft.quantum.canon.applytoheadca
  summary: 将操作应用到数组的第一个元素。
- uid: microsoft.quantum.canon.applytomost
  summary: 将操作应用到数组中除最后一个元素之外的所有元素。
- uid: microsoft.quantum.canon.applytomosta
  summary: 将操作应用到数组中除最后一个元素之外的所有元素。
- uid: microsoft.quantum.canon.applytomostc
  summary: 将操作应用到数组中除最后一个元素之外的所有元素。
- uid: microsoft.quantum.canon.applytomostca
  summary: 将操作应用到数组中除最后一个元素之外的所有元素。
- uid: microsoft.quantum.canon.applytopartition
  summary: 将一对操作应用于寄存器的给定分区分为两部分。
- uid: microsoft.quantum.canon.applytopartitiona
  summary: >-
    将一对操作应用于寄存器的给定分区分为两部分。

    修饰符 `A` 指示操作为 adjointable。
- uid: microsoft.quantum.canon.applytopartitionc
  summary: >-
    将一对操作应用于寄存器的给定分区分为两部分。

    修饰符 `C` 指示操作可控制。
- uid: microsoft.quantum.canon.applytopartitionca
  summary: >-
    将一对操作应用于寄存器的给定分区分为两部分。

    修饰符 `CA` 指示该操作是可控制的且 adjointable。
- uid: microsoft.quantum.canon.applytorest
  summary: 将操作应用到数组中除第一个元素之外的所有元素。
- uid: microsoft.quantum.canon.applytoresta
  summary: 将操作应用到数组中除第一个元素之外的所有元素。
- uid: microsoft.quantum.canon.applytorestc
  summary: 将操作应用到数组中除第一个元素之外的所有元素。
- uid: microsoft.quantum.canon.applytorestca
  summary: 将操作应用到数组中除第一个元素之外的所有元素。
- uid: microsoft.quantum.canon.applytosubregister
  summary: 将操作应用于寄存器的 subregister，其 qubits 由其索引数组指定。
- uid: microsoft.quantum.canon.applytosubregistera
  summary: >-
    将操作应用于寄存器的 subregister，其 qubits 由其索引数组指定。

    修饰符 `A` 指示操作为 adjointable。
- uid: microsoft.quantum.canon.applytosubregisterc
  summary: >-
    将操作应用于寄存器的 subregister，其 qubits 由其索引数组指定。

    修饰符 `C` 指示操作可控制。
- uid: microsoft.quantum.canon.applytosubregisterca
  summary: >-
    将操作应用于寄存器的 subregister，其 qubits 由其索引数组指定。

    修饰符 `CA` 指示该操作是可控制的且 adjointable。
- uid: microsoft.quantum.canon.applytotail
  summary: 将操作应用到数组的最后一个元素。
- uid: microsoft.quantum.canon.applytotaila
  summary: 将操作应用到数组的最后一个元素。
- uid: microsoft.quantum.canon.applytotailc
  summary: 将操作应用到数组的最后一个元素。
- uid: microsoft.quantum.canon.applytotailca
  summary: 将操作应用到数组的最后一个元素。
- uid: microsoft.quantum.canon.applywith
  summary: 给定两个操作，将一个操作应用到另一个运算。
- uid: microsoft.quantum.canon.applywitha
  summary: 给定两个操作，将一个操作应用到另一个运算。
- uid: microsoft.quantum.canon.applywithc
  summary: 给定两个操作，将一个操作应用到另一个运算。
- uid: microsoft.quantum.canon.applywithca
  summary: 给定两个操作，将一个操作应用到另一个运算。
- uid: microsoft.quantum.canon.applywithinputtransformation
  summary: 给定接受某些输入的操作，返回与该操作兼容的输出的函数以及该函数的输入将使用函数将输入转换为操作所需的格式。
- uid: microsoft.quantum.canon.applywithinputtransformationa
  summary: 给定接受某些输入的操作，返回与该操作兼容的输出的函数以及该函数的输入将使用函数将输入转换为操作所需的格式。
- uid: microsoft.quantum.canon.applywithinputtransformationc
  summary: 给定接受某些输入的操作，返回与该操作兼容的输出的函数以及该函数的输入将使用函数将输入转换为操作所需的格式。
- uid: microsoft.quantum.canon.applywithinputtransformationca
  summary: 给定接受某些输入的操作，返回与该操作兼容的输出的函数以及该函数的输入将使用函数将输入转换为操作所需的格式。
- uid: microsoft.quantum.canon.approximatelyapplydiagonalunitary
  summary: 将一个复杂阶段数组应用于 qubits 寄存器的数字基础状态，根据给定的公差截断小旋转角度。
- uid: microsoft.quantum.canon.approximatelymultiplexpauli
  summary: 应用对 qubits 数组使用的 Pauli 旋转，根据给定的公差截断小旋转角度。
- uid: microsoft.quantum.canon.approximatelymultiplexz
  summary: 对 qubits 数组应用 Pauli Z 旋转，根据给定的公差截断小旋转角度。
- uid: microsoft.quantum.canon.approximateqft
  summary: 将大致的量程傅立叶转换 (AQFT) 应用到一个量程寄存器。
- uid: microsoft.quantum.canon.asserthighestbit
  summary: "\n> [!WARNING]\n> 已放弃\n\nAssertHighestBit 已被弃用。 请改用 @\"microsoft.quantum.arithmetic.assertmostsignificantbit\"。\n请使用 @\"Microsoft.Quantum.Arithmetic.AssertMostSignificantBit\"。"
- uid: microsoft.quantum.canon.assertlessthanphasele
  summary: "\n> [!WARNING]\n> 已放弃\n\nAssertLessThanPhaseLE 已被弃用。 请改用 @\"microsoft.quantum.arithmetic.assertphaselessthan\"。\n请使用 @\"Microsoft.Quantum.Arithmetic.AssertPhaseLessThan\"。"
- uid: microsoft.quantum.canon.assertphase
  summary: "\n> [!WARNING]\n> 已放弃\n\nAssertPhase 已被弃用。 请改用 @\"microsoft.quantum.diagnostics.assertphase\"。"
- uid: microsoft.quantum.canon.cascadeccnot
  summary: "\n> [!WARNING]\n> 已放弃\n\nCascadeCCNOT 已被弃用。 请改用 @\"microsoft.quantum.canon.applyccnotchain\"。"
- uid: microsoft.quantum.canon.cascadecnot
  summary: "\n> [!WARNING]\n> 已放弃\n\nCascadeCNOT 已被弃用。 请改用 @\"microsoft.quantum.canon.applycnotchain\"。\n请使用 @\"microsoft.quantum.canon.applycnotchain\"。"
- uid: microsoft.quantum.canon.cnotchain
  summary: "\n> [!WARNING]\n> 已放弃\n\nCNOTChain 已被弃用。 请改用 @\"microsoft.quantum.canon.applycnotchain\"。"
- uid: microsoft.quantum.canon.cnotchaintarget
  summary: "\n> [!WARNING]\n> 已放弃\n\nCNOTChainTarget 已被弃用。 请改用 @\"microsoft.quantum.canon.applycnotchainwithtarget\"。"
- uid: microsoft.quantum.canon.cx
  summary: >-
    将受控-X (CX) 入口应用于一对 qubits。


    $ $ \begin{align} 1 & 0 & 0 & 0 \\ \\ 0 & 1 & 0 & 0 \\ \\ 0 & 0 & 0 & 1 \\ \\ 0 & 0 & 1 & 0 \end{align}，$ $，其中的行和列组织为 "量程概念" 指南。
- uid: microsoft.quantum.canon.cy
  summary: >-
    将受控-Y (CY) 入口应用于一对 qubits。


    $ $ \begin{align} 1 & 0 & 0 & 0 \\ \\ 0 & 1 & 0 & 0 \\ \\ 0 & 0 & 0 &-i \\ \\ 0 & 0 & & 0 \end{align}，$ $，其中的行和列按 "量程概念" 指南进行组织。
- uid: microsoft.quantum.canon.cz
  summary: >-
    将受控-Z (CZ) 入口应用于一对 qubits。


    $ $ \begin{align} 1 & 0 & 0 & 0 \\ \\ 0 & 1 & 0 & 0 \\ \\ 0 & 0 & 1 & 0 \\ \\ 0 & 0 & 0 &-1 \end{align}，$ $，其中的行和列组织为 "量程概念" 指南。
- uid: microsoft.quantum.canon.delay
  summary: 应用给定操作，延迟。
- uid: microsoft.quantum.canon.delaya
  summary: 应用给定操作，延迟。
- uid: microsoft.quantum.canon.delayc
  summary: 应用给定操作，延迟。
- uid: microsoft.quantum.canon.delayca
  summary: 应用给定操作，延迟。
- uid: microsoft.quantum.canon.hy
  summary: >-
    将 Y 基础模拟应用于交换 Z 轴和 Y 轴的 Hadamard 转换。


    单个 qubit 上的 Y Hadamard 转换 $H _Y = S H $ 为：


    \begin{align} H_Y \mathrel{： =} \frac {1} {\sqrt {2} } \begin{bmatrix} 1 & 1 \\ \\ i &-i \end{bmatrix}。

    \end{align}
- uid: microsoft.quantum.canon.inplacemajority
  summary: "\n> [!WARNING]\n> 已放弃\n\nInPlaceMajority 已被弃用。 请改用 @\"microsoft.quantum.arithmetic.applymajorityinplace\"。\n请使用 @\"microsoft.quantum.arithmetic.applymajorityinplace\"。"
- uid: microsoft.quantum.canon.inplacexorbe
  summary: "\n> [!WARNING]\n> 已放弃\n\nInPlaceXorBE 已被弃用。 请改用 @ \"applyreversedopleca (applyxorinplace (值，_) ，目标) \"。\n此操作已被删除。"
- uid: microsoft.quantum.canon.inplacexorle
  summary: "\n> [!WARNING]\n> 已放弃\n\nInPlaceXorLE 已被弃用。 请改用 @\"microsoft.quantum.measurement.applyxorinplace\"。\n请使用 @\"Microsoft.Quantum.Measurement.ApplyXorInPlace\"。"
- uid: microsoft.quantum.canon.integerincrementle
  summary: "\n> [!WARNING]\n> 已放弃\n\nIntegerIncrementLE 已被弃用。 请改用 @\"microsoft.quantum.arithmetic.incrementbyinteger\"。\n请使用 @\"Microsoft.Quantum.Arithmetic.IncrementByInteger\"。"
- uid: microsoft.quantum.canon.integerincrementphasele
  summary: "\n> [!WARNING]\n> 已放弃\n\nIntegerIncrementPhaseLE 已被弃用。 请改用 @\"microsoft.quantum.arithmetic.incrementphasebyinteger\"。\n请使用 @\"Microsoft.Quantum.Arithmetic.IncrementPhaseByInteger\"。"
- uid: microsoft.quantum.canon.iteratethroughcartesianpower
  summary: 以整数范围的笛卡尔幂对每个索引应用操作。
- uid: microsoft.quantum.canon.iteratethroughcartesianproduct
  summary: 对若干范围内笛卡尔积中的每个索引应用操作。
- uid: microsoft.quantum.canon.modularaddproductle
  summary: "\n> [!WARNING]\n> 已放弃\n\nModularAddProductLE 已被弃用。 请改用 @\"microsoft.quantum.arithmetic.multiplyandaddbymodularinteger\"。\n请使用 @\"Microsoft.Quantum.Arithmetic.MultiplyAndAddByModularInteger\"。"
- uid: microsoft.quantum.canon.modularaddproductphasele
  summary: "\n> [!WARNING]\n> 已放弃\n\nModularAddProductPhaseLE 已被弃用。 请改用 @\"microsoft.quantum.arithmetic.multiplyandaddphasebymodularinteger\"。\n请使用 @\"Microsoft.Quantum.Arithmetic.MultiplyAndAddPhaseByModularInteger\"。"
- uid: microsoft.quantum.canon.modularincrementle
  summary: "\n> [!WARNING]\n> 已放弃\n\nModularIncrementLE 已被弃用。 请改用 @\"microsoft.quantum.arithmetic.modularincrementbyinteger\"。\n请使用 @\"Microsoft.Quantum.Arithmetic.ModularIncrementByInteger\"。"
- uid: microsoft.quantum.canon.modularincrementphasele
  summary: "\n> [!WARNING]\n> 已放弃\n\nModularIncrementPhaseLE 已被弃用。 请改用 @\"microsoft.quantum.arithmetic.incrementphasebymodularinteger\"。\n请使用 @\"Microsoft.Quantum.Arithmetic.IncrementPhaseByModularInteger\"。"
- uid: microsoft.quantum.canon.modularmultiplybyconstantle
  summary: "\n> [!WARNING]\n> 已放弃\n\nModularMultiplyByConstantLE 已被弃用。 请改用 @\"microsoft.quantum.arithmetic.multiplybymodularinteger\"。\n请使用 @\"Microsoft.Quantum.Arithmetic.MultiplyByModularInteger\"。"
- uid: microsoft.quantum.canon.multiplexoperations
  summary: >-
    应用由数值状态数组控制的操作的数组。


    也就是说，应用 $U $ 的乘法控制的单一操作，该操作在通过 $n $-qubit number state $ \ket{j} $ 控制时应用单一 $V _j $。


    $U = \sum ^ {2 ^ n-1} _ {j = 0} \ket{j}\bra{j}\otimes V_j $。
- uid: microsoft.quantum.canon.multiplexoperationsbruteforcefromgenerator
  summary: >-
    应用 $U $ 的乘法控制的单一操作，该操作将应用单一 $V _j $，由 n qubit number state $ \ket{j} $ 控制。


    $U = \sum ^ {N-1} _ {j = 0} \ket{j}\bra{j}\otimes V_j $。
- uid: microsoft.quantum.canon.multiplexoperationsfromgenerator
  summary: >-
    应用 $U $ 的乘法控制的单一操作，该操作将应用单一 $V _j $，由 n qubit number state $ \ket{j} $ 控制。


    $U = \sum ^ {N-1} _ {j = 0} \ket{j}\bra{j}\otimes V_j $。
- uid: microsoft.quantum.canon.multiplexpauli
  summary: 对 qubits 数组应用 Pauli 旋转。
- uid: microsoft.quantum.canon.multiplexz
  summary: 对 qubits 数组应用 Pauli Z 旋转。
- uid: microsoft.quantum.canon.noop
  summary: 对参数执行 (no op) 的标识操作。
- uid: microsoft.quantum.canon.permutequbits
  summary: 使用交换操作 Permutes qubits。
- uid: microsoft.quantum.canon.qft
  summary: 对包含大字节序表示形式整数的量程寄存器执行量程傅立叶转换。
- uid: microsoft.quantum.canon.qftle
  summary: 对包含小 endian 表示形式整数的量程寄存器执行量程傅立叶转换。
- uid: microsoft.quantum.canon.rall0
  summary: >-
    执行阶段移位操作。


    $R = \boldone- (1-e ^ {i \phi} ) \ket{0\cdots 0} \bra{0\cdots 0} $。
- uid: microsoft.quantum.canon.rall1
  summary: >-
    执行阶段移位操作。


    $R = \boldone- (1-e ^ {i \phi} ) \ket{1\cdots 1} \bra{1\cdots 1} $。
- uid: microsoft.quantum.canon.repeat
  summary: 在给定的次数后重复操作。
- uid: microsoft.quantum.canon.repeata
  summary: 在给定的次数后重复操作。
- uid: microsoft.quantum.canon.repeatc
  summary: 在给定的次数后重复操作。
- uid: microsoft.quantum.canon.repeatca
  summary: 在给定的次数后重复操作。
- uid: microsoft.quantum.canon.swapreverseregister
  summary: 使用交换入口反转寄存器中 qubits 的顺序。
newtypes:
- uid: microsoft.quantum.canon.ccnotop
  summary: CCNOT 入口的签名类型。
- uid: microsoft.quantum.canon.resultstack
  summary: "\n> [!WARNING]\n> 已放弃\n\nResultStack 已被弃用。"
metadata:
  ms.openlocfilehash: 7346d86d3ff9db2146f37a3f402b60faebe442b7
  ms.sourcegitcommit: 685a8ab16d7e6a25e63a168d6e7c385fa6e876cc
  ms.translationtype: MT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 09/29/2020
  ms.locfileid: "91464430"
