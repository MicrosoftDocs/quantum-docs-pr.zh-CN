### YamlMime:QSharpType
uid: microsoft.quantum.arithmetic.multiplyi
name: MultiplyI
type: operation
namespace: Microsoft.Quantum.Arithmetic
summary: 将整数 `xs` 乘以整数 `ys` 并将结果存储在 `result`，这必须最初为零。
remarks: >-
  使用标准的移位和添加方法来实现乘法。

  通过将 $x 的 _i $ 复制到 qubits 上的 ancilla qubit，然后控制 ancilla qubit 上的加法，来改进受控版本。
syntax: 'operation MultiplyI (xs : Microsoft.Quantum.Arithmetic.LittleEndian, ys : Microsoft.Quantum.Arithmetic.LittleEndian, result : Microsoft.Quantum.Arithmetic.LittleEndian) : Unit'
input:
  content: '(xs : Microsoft.Quantum.Arithmetic.LittleEndian, ys : Microsoft.Quantum.Arithmetic.LittleEndian, result : Microsoft.Quantum.Arithmetic.LittleEndian)'
  types:
  - name: xs
    summary: $n $ bit 被乘数（LittleEndian）
    uid: microsoft.quantum.arithmetic.littleendian
  - name: ys
    summary: $n $-bit 乘数（LittleEndian）
    uid: microsoft.quantum.arithmetic.littleendian
  - name: result
    summary: $ 2n $ bit result （LittleEndian）的状态必须为 $ \ket{0}$ 起初。
    uid: microsoft.quantum.arithmetic.littleendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
ms.openlocfilehash: 5af23390ef67bf339e816e4e8af1d3f52847aaa7
ms.sourcegitcommit: 8becfb03eb60ba205c670a634ff4daa8071bcd06
ms.translationtype: MT
ms.contentlocale: zh-CN
ms.lasthandoff: 10/31/2019
ms.locfileid: "73218730"
