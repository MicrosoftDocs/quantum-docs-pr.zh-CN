### YamlMime:QSharpType
uid: microsoft.quantum.canon.iteratethroughcartesianproduct
name: IterateThroughCartesianProduct
type: operation
namespace: microsoft.quantum.canon
summary: >-
  对若干范围内笛卡尔积中的每个索引应用操作。


  以迭代方式为、、... 的笛卡尔积的每个元素应用操作 `0..(bounds[0] - 1)` `0..(bounds[1] - 1)``0..(bounds[Length(bounds) - 1] - 1)`
examples: >-
  给定一个操作 `op` ，以下两个代码段是等效的：


  ```Q#

  IterateThroughCartesianProduct([3, 4, 5], op);

  ```


  ```Q#

  op([0, 0, 0]);

  op([1, 0, 0]);

  op([2, 0, 0]);

  op([0, 1, 0]);

  // ...

  op([0, 3, 0]);

  op([0, 0, 1]);

  //

  op([2, 3, 4]);

  ```
syntax: 'operation IterateThroughCartesianProduct (bounds : Int[], op : (Int[] => Unit)) : Unit'
input:
  content: '(bounds : Int[], op : (Int[] => Unit))'
  types:
  - name: bounds
    summary: 指定要循环访问的范围的数组，其中每个范围都指定为整数长度。
    isArray: true
    isPrimitive: true
    uid: Int
  - name: op
    summary: 为给定笛卡尔积的每个元素调用的操作。
    isOperation: true
    input:
      types:
      - isArray: true
        isPrimitive: true
        uid: Int
    output:
      types:
      - isPrimitive: true
        uid: Unit
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
seeAlso:
- microsoft.quantum.canon.iteratethroughcartesianpower
metadata:
  ms.openlocfilehash: e5642f578adac599c48599aa400791ffb2c44dfb
  ms.sourcegitcommit: 685a8ab16d7e6a25e63a168d6e7c385fa6e876cc
  ms.translationtype: MT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 09/29/2020
  ms.locfileid: "91470957"
