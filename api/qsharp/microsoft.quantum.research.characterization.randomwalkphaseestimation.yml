### YamlMime:QSharpType
uid: microsoft.quantum.research.characterization.randomwalkphaseestimation
name: RandomWalkPhaseEstimation
type: operation
namespace: microsoft.quantum.research.characterization
summary: 执行迭代阶段估算，并使用随机遍历来估算给定 oracle 和 eigenstate 的传统测量结果中的 Bayesian 推理。
remarks: >-
  ### <a name="iterative-phase-estimation-and-eigenstates"></a>迭代阶段估计和 Eigenstates


  通常，输入寄存器 `eigenstate` 不需要是 $U $ 的 eigenstate $ \ket{\phi} $，但可以是 eigenstates 上的 superposition。 假设输入状态由 \begin{align} \ket{\psi} & = \sum \_ {j} \alpha \_ j \ket{\phi \_ j}，\end{align}，其中 $ \{ \alpha \_ j \} $ 是复数系数，如 $ \sum \_ j | \alpha \_ j | ^ 2 = $1，其中 $U \ket{\phi \_ j} = \phi \_ j\ket {\ phi \_ j} $。


  然后，执行迭代阶段估算最终将聚合到单个 eigenstate，如 [开发指南](xref:microsoft.quantum.libraries.characterization#iterative-phase-estimation-without-eigenstates)中所述。


  ### <a name="experiment-design"></a>试验设计


  根据粒子推测试探法 $ \theta $ 传递到的度量 $t 时间 $ $ `oracle` ， *particle guess heuristic*\Begin{align} \theta \sim \Pr ( \phi) ，\quad t \approx \frac {1} {\variance{\phi}}。

  \end{align} 这种试探的最佳做法是，在以前的假设条件下，使用迭代阶段估算来减少预期的后验方差。


  ### <a name="optimality"></a>最优性


  此操作近似于阶段 $ \phi $ 的最佳估计器，因为使用二次丢失 $L ( \phi，\hat{\phi} ) \mathrel{： =} ( \phi-\hat{\phi} ) ^ $2。


  有关迭代阶段估算统计信息的详细信息，请参阅 [Bayesian 阶段估算](xref:microsoft.quantum.libraries.characterization#bayesian-phase-estimation) 。
syntax: 'operation RandomWalkPhaseEstimation (initialMean : Double, initialStdDev : Double, nMeasurements : Int, maxMeasurements : Int, unwind : Int, oracle : Microsoft.Quantum.Oracles.ContinuousOracle, targetState : Qubit[]) : Double'
references: >-
  - Ferrie *et al.* 2011 [doi>10.1145： 10/tfx-cli](https://doi.org/10.1007/s11128-012-0407-6)， [arXiv： 1110.3067](https://arxiv.org/abs/1110.3067)。

  - Wiebe *et al.* 2013 [doi>10.1145： 10/tf3](https://doi.org/10.1103/PhysRevLett.112.190501)、 [arXiv： 1309.0876](https://arxiv.org/abs/1309.0876)

  - Wiebe 和 Granade 2018 * (准备) *。
input:
  content: '(initialMean : Double, initialStdDev : Double, nMeasurements : Int, maxMeasurements : Int, unwind : Int, oracle : Microsoft.Quantum.Oracles.ContinuousOracle, targetState : Qubit[])'
  types:
  - name: initialMean
    summary: $ \Phi $ 前面初始正常分布的平均值。
    isPrimitive: true
    uid: Double
  - name: initialStdDev
    summary: 在 $ \phi $ 之前的初始正常之前的标准偏差。
    isPrimitive: true
    uid: Double
  - name: nMeasurements
    summary: 要接受到最终后验估计值的度量值的数量。
    isPrimitive: true
    uid: Int
  - name: maxMeasurements
    summary: 在操作被视为失败之前可以执行的度量总数。
    isPrimitive: true
    uid: Int
  - name: unwind
    summary: 一致性检查失败时要记住的结果数。
    isPrimitive: true
    uid: Int
  - name: oracle
    summary: 表示单一 $U $ 的操作，$U (t) \ket{\phi} = e ^ {\phi}\ket{\phi} $ for eigenstates $ \ket{\phi} $，其中包含未知阶段 $ \phi \in \mathbb{R} ^ + $。
    uid: microsoft.quantum.oracles.continuousoracle
  - name: targetState
    summary: $U $ 操作的寄存器。
    isArray: true
    isPrimitive: true
    uid: Qubit
output:
  content: Double
  types:
  - summary: 最终的估计 $ \hat{\phi} \mathrel{： =} \expect [\phi] $，其中，假定所有接受的数据都超出了后验。
    isPrimitive: true
    uid: Double
metadata:
  ms.openlocfilehash: a6f0d6efa8bf88eaaf239e7c04170b21374247aa
  ms.sourcegitcommit: 685a8ab16d7e6a25e63a168d6e7c385fa6e876cc
  ms.translationtype: MT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 09/29/2020
  ms.locfileid: "91465654"
