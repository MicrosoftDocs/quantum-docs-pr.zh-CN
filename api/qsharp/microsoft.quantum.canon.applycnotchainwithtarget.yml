### YamlMime:QSharpType
uid: microsoft.quantum.canon.applycnotchainwithtarget
name: ApplyCNOTChainWithTarget
type: operation
namespace: microsoft.quantum.canon
summary: >-
  计算 qubits 数组到目标 qubit 的奇偶校验。


  如果数组最初处于状态 $ \ket{q_0} \ket{q_1} \cdots \ket{q_ {\text{target}}} $，则最终状态由 $ \ket{q_0} \ket{q_1 \oplus q_0} \cdots \ket{q_ {n-1} \oplus \cdots \oplus q_0 \oplus q_ {\text{target}}} $。
remarks: >-
  以下项是等效的：


  ```qsharp

  ApplyCNOTChainWithTarget(Most(qs), Last(qs));

  ```


  和


  ```qsharp

  ApplyCNOTChain(qs);

  ```
syntax: 'operation ApplyCNOTChainWithTarget (qubits : Qubit[], targetQubit : Qubit) : Unit'
input:
  content: '(qubits : Qubit[], targetQubit : Qubit)'
  types:
  - name: qubits
    summary: 计算其奇偶校验的 qubits 数组。
    isArray: true
    isPrimitive: true
    uid: Qubit
  - name: targetQubit
    summary: "\"Qubits\" 的奇偶校验的最终 qubit 为 XORed。"
    isPrimitive: true
    uid: Qubit
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
metadata:
  ms.openlocfilehash: 156721c0e5f61dc9761e53d08342cbab3d815e75
  ms.sourcegitcommit: d6ac6f4345be0dd68f1bcd944f44b08e7a3cf346
  ms.translationtype: MT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 09/02/2020
  ms.locfileid: "89350789"
