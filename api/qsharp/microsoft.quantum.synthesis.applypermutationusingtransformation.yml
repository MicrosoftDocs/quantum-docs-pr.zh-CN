### YamlMime:QSharpType
uid: microsoft.quantum.synthesis.applypermutationusingtransformation
name: ApplyPermutationUsingTransformation
type: operation
namespace: Microsoft.Quantum.Synthesis
summary: >-
  使用基于转换的合成，将 amplitudes Permutes 为量程状态。


  此过程实现基于单向转换的合成方法。  输入是一种排列 $ \pi $ over $ 2 ^ n $ 元素 $ \{ 0，\dots ..，2 ^ n-1 \} $，表示 $n $-可变可逆布尔函数。

  算法以迭代方式执行以下步骤：


  1. 查找 $x \ne \pi （x） = y $ 的最小 $x $。

  2. 查找多个受控制的 Toffoli 操作，这些操作应用于输出使 $ \pi （x） = x $ 和不会对所有 $x "< x $ 更改 $ \pi （x '） $
examples: >-
  要合成 `SWAP` 操作：


  ```Q#

  using (qubits = Qubit[2]) {
    ApplyPermutationUsingTransformation([0, 2, 1, 3], LittleEndian(qubits));
  }

  ```
syntax: 'operation ApplyPermutationUsingTransformation (perm : Int[], qubits : Microsoft.Quantum.Arithmetic.LittleEndian) : Unit'
references: >-
  - [*D. Michael 莎莎*， *Dmitri Maslov*， *Gerhard DUECK*，Proc 2003，IEEE，pp 318-323，2003](https://doi.org/10.1145/775832.775915)

  - [*Mathias Soeken*， *Gerhard Dueck*， *d. Michael 莎莎*，Proc 2016，springer link，pp 307-321，2016](https://doi.org/10.1007/978-3-319-40578-0_22)
input:
  content: '(perm : Int[], qubits : Microsoft.Quantum.Arithmetic.LittleEndian)'
  types:
  - name: perm
    summary: 从0开始的 $ 2 ^ n $ 元素的排列。
    isArray: true
    isPrimitive: true
    uid: Int
  - name: qubits
    summary: 将排列应用到的 $n $ qubits 的列表。
    uid: microsoft.quantum.arithmetic.littleendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
seeAlso:
- microsoft.quantum.synthesis.applypermutationusingdecomposition
metadata:
  ms.openlocfilehash: e611197ba2fbfc0271c17664acc23b4de2c90ff6
  ms.sourcegitcommit: a3775921db1dc5c653c97b8fa8fe2c0ddd5261ff
  ms.translationtype: MT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 07/02/2020
  ms.locfileid: "85886113"
