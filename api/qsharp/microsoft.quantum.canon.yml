### YamlMime:QSharpNamespace
functions:
- summary: 如果的值为奇数，则返回 1; `index` 如果的值为偶数，则返回-1 `index` 。
  uid: Microsoft.Quantum.Canon.Angle
- summary: ''
  uid: Microsoft.Quantum.Canon.AnyOutsideToleranceCP
- summary: ''
  uid: Microsoft.Quantum.Canon.AnyOutsideToleranceD
- summary: 根据索引排列 control、target 和 helper qubits
  uid: Microsoft.Quantum.Canon.ArrangedQubits
- summary: >+
    > [!WARNING]

    > BigEndianToLittleEndian 已被弃用。 请改用 <xref:Microsoft.Quantum.Arithmetic.BigEndianAsLittleEndian>。

    >

    > 请使用 @"Microsoft.Quantum.Arithmetic.BigEndianAsLittleEndian"。

  uid: Microsoft.Quantum.Canon.BigEndianToLittleEndian
- summary: 给定针对单个输入的操作数组时，将生成一个按顺序执行每个给定操作的新操作。
  uid: Microsoft.Quantum.Canon.Bound
- summary: 给定针对单个输入的操作数组时，将生成一个按顺序执行每个给定操作的新操作。 修饰符 `A` 指示数组中的所有操作都是 adjointable。
  uid: Microsoft.Quantum.Canon.BoundA
- summary: 给定针对单个输入的操作数组时，将生成一个按顺序执行每个给定操作的新操作。 修饰符 `C` 指示数组中的所有操作都可控制。
  uid: Microsoft.Quantum.Canon.BoundC
- summary: 给定针对单个输入的操作数组时，将生成一个按顺序执行每个给定操作的新操作。 修饰符 `CA` 指示数组中的所有操作都是 adjointable 且可控制的。
  uid: Microsoft.Quantum.Canon.BoundCA
- summary: 给定操作 op，返回一个新操作，该操作将应用操作（如果古典控制位为 true）。 如果为，则不 `false` 执行任何操作。
  uid: Microsoft.Quantum.Canon.CControlled
- summary: 给定操作 op，返回一个新操作，该操作将应用操作（如果古典控制位为 true）。 如果为，则不 `false` 执行任何操作。 修饰符 `A` 指示操作为 adjointable。
  uid: Microsoft.Quantum.Canon.CControlledA
- summary: 给定操作 op，返回一个新操作，该操作将应用操作（如果古典控制位为 true）。 如果为，则不 `false` 执行任何操作。 修饰符 `C` 指示操作可控制。
  uid: Microsoft.Quantum.Canon.CControlledC
- summary: 给定操作 op，返回一个新操作，该操作将应用操作（如果古典控制位为 true）。 如果为，则不 `false` 执行任何操作。 修饰符 `CA` 指示该操作是可控制的且 adjointable。
  uid: Microsoft.Quantum.Canon.CControlledCA
- summary: 返回两个函数的组合。
  uid: Microsoft.Quantum.Canon.Compose
- summary: 返回给定输入的和的组合的输出 `inner` `outer` 。
  uid: Microsoft.Quantum.Canon.ComposedOutput
- summary: 给定的外部和内部操作返回一个新的操作，该操作将由外部操作词干内部操作。
  uid: Microsoft.Quantum.Canon.ConjugatedBy
- summary: 给定的外部和内部操作返回一个新的操作，该操作将由外部操作词干内部操作。
  uid: Microsoft.Quantum.Canon.ConjugatedByA
- summary: 给定的外部和内部操作返回一个新的操作，该操作将由外部操作词干内部操作。
  uid: Microsoft.Quantum.Canon.ConjugatedByC
- summary: 给定的外部和内部操作返回一个新的操作，该操作将由外部操作词干内部操作。
  uid: Microsoft.Quantum.Canon.ConjugatedByCA
- summary: 如果控件注册状态对应于指定的位掩码，则返回在目标寄存器上应用 oracle 的单一操作。
  uid: Microsoft.Quantum.Canon.ControlledOnBitString
- summary: 如果控件注册状态对应于指定的正整数，则返回一个单一运算符，该运算符应用目标寄存器上的 oracle。
  uid: Microsoft.Quantum.Canon.ControlledOnInt
- summary: >-
    返回对两个输入的操作的扩充版本。

    也就是说，假设有一个具有两个输入的操作，则此函数将应用咖喱的 isomorphism $f (x，y) \equiv f (x) # B4 y) $ 以返回一个输入的操作，该操作返回一个输入的操作。
  uid: Microsoft.Quantum.Canon.CurriedOp
- summary: >+
    > [!WARNING]

    > DecomposeIntoTimeStepsCA 已被弃用。 请改用 <xref:Microsoft.Quantum.Canon.DecomposedIntoTimeStepsCA>。

  uid: Microsoft.Quantum.Canon.DecomposeIntoTimeStepsCA
- summary: 返回为给定操作实现 Trotter – Suzuki 集成器的操作。
  uid: Microsoft.Quantum.Canon.DecomposedIntoTimeStepsCA
- summary: 返回应用给定自变量的给定操作的操作。
  uid: Microsoft.Quantum.Canon.Delayed
- summary: 返回应用给定自变量的给定操作的操作。
  uid: Microsoft.Quantum.Canon.DelayedA
- summary: 返回应用给定自变量的给定操作的操作。
  uid: Microsoft.Quantum.Canon.DelayedC
- summary: 返回应用给定自变量的给定操作的操作。
  uid: Microsoft.Quantum.Canon.DelayedCA
- summary: 给定 qubit Pauli 运算符和 qubit 的索引后，将返回一个多 qubit Pauli 运算符，该运算符具有给定的单一 qubit 运算符，位于该索引处和 `PauliI` 其他每个索引处。
  uid: Microsoft.Quantum.Canon.EmbedPauli
- summary: 给定一对，返回其第一个元素。
  uid: Microsoft.Quantum.Canon.Fst
- summary: 创建灰色代码序列
  uid: Microsoft.Quantum.Canon.GrayCode
- summary: 计算整数的 Hamming 权重，即二进制扩展中的1的值。
  uid: Microsoft.Quantum.Canon.HammingWeightI
- summary: 忽略操作或函数的输出。
  uid: Microsoft.Quantum.Canon.Ignore
- summary: 当且仅当输入范围为空时，返回 true。
  uid: Microsoft.Quantum.Canon.IsRangeEmpty
- summary: 测试给定结果值是否等于 `One` 。
  uid: Microsoft.Quantum.Canon.IsResultOne
- summary: 测试给定结果值是否等于 `Zero` 。
  uid: Microsoft.Quantum.Canon.IsResultZero
- summary: >+
    > [!WARNING]

    > LittleEndianToBigEndian 已被弃用。 请改用 <xref:Microsoft.Quantum.Arithmetic.LittleEndianAsBigEndian>。

    >

    > 请使用 @"Microsoft.Quantum.Arithmetic.LittleEndianAsBigEndian"。

  uid: Microsoft.Quantum.Canon.LittleEndianToBigEndian
- summary: 乘以控制 Z 旋转的实现步骤。
  uid: Microsoft.Quantum.Canon.MultiplexZCoefficients
- summary: >-
    返回 $U $ 的乘法控制的单一操作，该操作将应用单一 $V _j $，由 n qubit number state $ \ket{j} $ 控制。

    $U = \sum ^ {2 ^ n-1} _ {j = 0} \ket{j}\bra{j}\otimes V_j $。
  uid: Microsoft.Quantum.Canon.MultiplexerBruteForceFromGenerator
- summary: >-
    返回 $U $ 的乘法控制的单一操作，该操作将应用单一 $V _j $，由 n qubit number state $ \ket{j} $ 控制。

    $U = \sum ^ {2 ^ n-1} _ {j = 0} \ket{j}\bra{j}\otimes V_j $。
  uid: Microsoft.Quantum.Canon.MultiplexerFromGenerator
- summary: >-
    引发幂运算。

    也就是说，在给定一个表示入口 $U $ 的操作的情况下，将为 power $m $ $U ^ m $ 返回一个新操作。
  uid: Microsoft.Quantum.Canon.OperationPow
- summary: >-
    引发幂运算。 修饰符 `A` 指示操作为 adjointable。

    也就是说，在给定一个表示入口 $U $ 的操作的情况下，将为 power $m $ $U ^ m $ 返回一个新操作。
  uid: Microsoft.Quantum.Canon.OperationPowA
- summary: >-
    引发幂运算。 修饰符 `C` 指示操作可控制。

    也就是说，在给定一个表示入口 $U $ 的操作的情况下，将为 power $m $ $U ^ m $ 返回一个新操作。
  uid: Microsoft.Quantum.Canon.OperationPowC
- summary: >-
    引发幂运算。 修饰符 `A` 指示该操作是可控制的且 adjointable。

    也就是说，在给定一个表示入口 $U $ 的操作的情况下，将为 power $m $ $U ^ m $ 返回一个新操作。
  uid: Microsoft.Quantum.Canon.OperationPowCA
- summary: 将操作限制为寄存器的索引数组，即，subregister。
  uid: Microsoft.Quantum.Canon.RestrictedToSubregister
- summary: 将操作限制为寄存器的索引数组，即，subregister。 修饰符 `A` 指示操作为 adjointable。
  uid: Microsoft.Quantum.Canon.RestrictedToSubregisterA
- summary: 将操作限制为寄存器的索引数组，即，subregister。 修饰符 `C` 指示操作可控制。
  uid: Microsoft.Quantum.Canon.RestrictedToSubregisterC
- summary: 将操作限制为寄存器的索引数组，即，subregister。 修饰符 `CA` 指示该操作是可控制的且 adjointable。
  uid: Microsoft.Quantum.Canon.RestrictedToSubregisterCA
- summary: 如果给定对，则返回第二个元素。
  uid: Microsoft.Quantum.Canon.Snd
- summary: >+
    > [!WARNING]

    > StackCapacity 已被弃用。

  uid: Microsoft.Quantum.Canon.StackCapacity
- summary: >+
    > [!WARNING]

    > StackLength 已被弃用。

  uid: Microsoft.Quantum.Canon.StackLength
- summary: >+
    > [!WARNING]

    > StackNew 已被弃用。

  uid: Microsoft.Quantum.Canon.StackNew
- summary: >+
    > [!WARNING]

    > StackPeek 已被弃用。

  uid: Microsoft.Quantum.Canon.StackPeek
- summary: >+
    > [!WARNING]

    > StackPop 已被弃用。

  uid: Microsoft.Quantum.Canon.StackPop
- summary: >+
    > [!WARNING]

    > StackPush 已被弃用。

  uid: Microsoft.Quantum.Canon.StackPush
- summary: 给定一个函数和一个操作，返回一个新的操作，其输入由给定函数转换。
  uid: Microsoft.Quantum.Canon.TransformedOperation
- summary: 给定一个函数和一个操作，返回一个新的操作，其输入由给定函数转换。
  uid: Microsoft.Quantum.Canon.TransformedOperationA
- summary: 给定一个函数和一个操作，返回一个新的操作，其输入由给定函数转换。
  uid: Microsoft.Quantum.Canon.TransformedOperationC
- summary: 给定一个函数和一个操作，返回一个新的操作，其输入由给定函数转换。
  uid: Microsoft.Quantum.Canon.TransformedOperationCA
- summary: 计算 Trotter 模拟算法的递归实现中的 Trotter 步长大小。
  uid: Microsoft.Quantum.Canon.TrotterStepSize
- summary: 给定一个返回操作的函数，返回一个将两个输入作为元组的新操作。
  uid: Microsoft.Quantum.Canon.UncurriedOp
- summary: 给定一个返回操作的函数，返回一个将两个输入作为元组的新操作。 修饰符 `A` 指示操作是 adjointable 的。
  uid: Microsoft.Quantum.Canon.UncurriedOpA
- summary: 给定一个返回操作的函数，返回一个将两个输入作为元组的新操作。 修饰符 `C` 指示操作可以控制。
  uid: Microsoft.Quantum.Canon.UncurriedOpC
- summary: 给定一个返回操作的函数，返回一个将两个输入作为元组的新操作。 修饰符 `CA` 指示操作可以控制和 adjointable。
  uid: Microsoft.Quantum.Canon.UncurriedOpCA
- summary: 返回给定数量的 qubits 上的所有 Pauli 运算符的数组。
  uid: Microsoft.Quantum.Canon.WeightOnePaulis
- summary: ''
  uid: Microsoft.Quantum.Canon.WithFirstInputApplied
- summary: >+
    > [!WARNING]

    > 不推荐使用 XOR。 请改用 <xref:Microsoft.Quantum.Logical.Xor>。

    >

    > 请使用 @"microsoft.quantum.logical.xor"。

  uid: Microsoft.Quantum.Canon.XOR
name: Microsoft.Quantum.Canon
newtypes:
- summary: CCNOT 入口的签名类型。
  uid: Microsoft.Quantum.Canon.CCNOTop
- summary: >+
    > [!WARNING]

    > ResultStack 已被弃用。

  uid: Microsoft.Quantum.Canon.ResultStack
operations:
- summary: 在目标 qubits 的寄存器上执行受控的 "AND 阶梯"。
  uid: Microsoft.Quantum.Canon.AndLadder
- summary: 当且仅当两个控件 qubits 都处于1状态时，使用度量来执行 adjoint 操作，以反转给定的目标 qubit。
  uid: Microsoft.Quantum.Canon.ApplyAnd
- summary: 计算和入口链
  uid: Microsoft.Quantum.Canon.ApplyAndChain
- summary: ''
  uid: Microsoft.Quantum.Canon.ApplyBound
- summary: ''
  uid: Microsoft.Quantum.Canon.ApplyBoundA
- summary: ''
  uid: Microsoft.Quantum.Canon.ApplyBoundC
- summary: ''
  uid: Microsoft.Quantum.Canon.ApplyBoundCA
- summary: 实现控制在两个 qubit 寄存器的相应位上控制的 CCNOT 入口的层叠，这是在其中一个寄存器的下一个 qubit 上进行的。 从两个寄存器中的位置0开始，将 CCNOT 应用于目标寄存器的位置1处的 qubit，然后由 qubits 在目标寄存器中的位置2进行控制，在目标 qubits 的位置2处进行控制，以目标 qubit 上的操作结束 `Length(nQubits)-1` 。
  uid: Microsoft.Quantum.Canon.ApplyCCNOTChain
- summary: 计算 qubits 的寄存器的奇偶校验。
  uid: Microsoft.Quantum.Canon.ApplyCNOTChain
- summary: 计算 qubits 数组到目标 qubit 的奇偶校验。
  uid: Microsoft.Quantum.Canon.ApplyCNOTChainWithTarget
- summary: 对目标寄存器应用单一操作，该操作由给定位掩码指定的状态控制。
  uid: Microsoft.Quantum.Canon.ApplyControlledOnBitString
- summary: 如果控件寄存器状态对应于指定的正整数，则对目标寄存器应用单一操作。
  uid: Microsoft.Quantum.Canon.ApplyControlledOnInt
- summary: ''
  uid: Microsoft.Quantum.Canon.ApplyCurriedOp
- summary: ''
  uid: Microsoft.Quantum.Canon.ApplyCurriedOpA
- summary: ''
  uid: Microsoft.Quantum.Canon.ApplyCurriedOpC
- summary: ''
  uid: Microsoft.Quantum.Canon.ApplyCurriedOpCA
- summary: 将复杂阶段数组应用于 qubits 寄存器的数字基础状态。
  uid: Microsoft.Quantum.Canon.ApplyDiagonalUnitary
- summary: 应用 Fermionic 交换。
  uid: Microsoft.Quantum.Canon.ApplyFermionicSWAP
- summary: 应用可在传统上使用的操作。
  uid: Microsoft.Quantum.Canon.ApplyIf
- summary: 应用以传统位为依据的 adjointable 操作。
  uid: Microsoft.Quantum.Canon.ApplyIfA
- summary: 应用采用传统位的可控操作。
  uid: Microsoft.Quantum.Canon.ApplyIfC
- summary: 应用在传统上有条件的单一操作。
  uid: Microsoft.Quantum.Canon.ApplyIfCA
- summary: 应用两个操作之一，具体取决于传统位的值。
  uid: Microsoft.Quantum.Canon.ApplyIfElseB
- summary: 应用两个 adjointable 操作之一，具体取决于传统位的值。
  uid: Microsoft.Quantum.Canon.ApplyIfElseBA
- summary: 应用两个可控操作之一，具体取决于传统位的值。
  uid: Microsoft.Quantum.Canon.ApplyIfElseBC
- summary: 应用两个单一操作之一，具体取决于传统位的值。
  uid: Microsoft.Quantum.Canon.ApplyIfElseBCA
- summary: 应用两个操作之一，具体取决于传统结果的值。
  uid: Microsoft.Quantum.Canon.ApplyIfElseR
- summary: 应用两个 adjointable 操作之一，具体取决于古典结果的值。
  uid: Microsoft.Quantum.Canon.ApplyIfElseRA
- summary: 应用两个可控操作之一，具体取决于古典结果的值。
  uid: Microsoft.Quantum.Canon.ApplyIfElseRC
- summary: 应用两个单一操作中的一个，具体取决于古典结果的值。
  uid: Microsoft.Quantum.Canon.ApplyIfElseRCA
- summary: 应用对经典结果值为1的操作。
  uid: Microsoft.Quantum.Canon.ApplyIfOne
- summary: 应用一个 adjointable 操作，该操作可将传统结果值视为1。
  uid: Microsoft.Quantum.Canon.ApplyIfOneA
- summary: 应用以传统结果值为一的可控操作。
  uid: Microsoft.Quantum.Canon.ApplyIfOneC
- summary: 将一个条件为的单一操作应用于传统结果值为1的值。
  uid: Microsoft.Quantum.Canon.ApplyIfOneCA
- summary: 应用对传统结果值为零的操作。
  uid: Microsoft.Quantum.Canon.ApplyIfZero
- summary: 应用对经典结果值为零的 adjointable 运算。
  uid: Microsoft.Quantum.Canon.ApplyIfZeroA
- summary: 应用在传统结果值为零的可控操作。
  uid: Microsoft.Quantum.Canon.ApplyIfZeroC
- summary: 应用在传统结果值为零的条件运算。
  uid: Microsoft.Quantum.Canon.ApplyIfZeroCA
- summary: 当且仅当两个 control qubits 都处于1状态时，使用 qubit 执行 adjoint 操作时，使用度量来反转给定目标。
  uid: Microsoft.Quantum.Canon.ApplyLowDepthAnd
- summary: 应用单个受控操作的多重控制版本。 修饰符 `C` 指示 qubit 操作可控制。
  uid: Microsoft.Quantum.Canon.ApplyMultiControlledC
- summary: 应用单个受控操作的多重控制版本。 修饰符 `CA` 指示 qubit 操作可控制和 adjointable。
  uid: Microsoft.Quantum.Canon.ApplyMultiControlledCA
- summary: 实现多控制的 Toffoli 入口，假定目标 qubit 初始化为0。  Adjoint 操作假定目标 qubit 将重置为0。
  uid: Microsoft.Quantum.Canon.ApplyMultiplyControlledAnd
- summary: 实现多控制的 Toffoli 入口，假定目标 qubit 初始化为0。  Adjoint 操作假定目标 qubit 将重置为0。  要求 Vny-rz-j42 深度为1，而 helper qubits 的数目在 qubits 数量上为指数。
  uid: Microsoft.Quantum.Canon.ApplyMultiplyControlledLowDepthAnd
- summary: 多次对 qubit 寄存器应用相同的操作。
  uid: Microsoft.Quantum.Canon.ApplyOpRepeatedlyOver
- summary: 多次对 qubit 寄存器应用相同的操作。
  uid: Microsoft.Quantum.Canon.ApplyOpRepeatedlyOverA
- summary: 多次对 qubit 寄存器应用相同的操作。
  uid: Microsoft.Quantum.Canon.ApplyOpRepeatedlyOverC
- summary: 多次对 qubit 寄存器应用相同的操作。
  uid: Microsoft.Quantum.Canon.ApplyOpRepeatedlyOverCA
- summary: ''
  uid: Microsoft.Quantum.Canon.ApplyOperationRepeatedly
- summary: ''
  uid: Microsoft.Quantum.Canon.ApplyOperationRepeatedlyA
- summary: ''
  uid: Microsoft.Quantum.Canon.ApplyOperationRepeatedlyC
- summary: ''
  uid: Microsoft.Quantum.Canon.ApplyOperationRepeatedlyCA
- summary: 给定多 qubit Pauli 运算符，将相应的操作应用于寄存器。
  uid: Microsoft.Quantum.Canon.ApplyPauli
- summary: 如果布尔数组的相应位与给定的输入相匹配，则对数组中的每个 qubit 应用 Pauli 运算符。
  uid: Microsoft.Quantum.Canon.ApplyPauliFromBitString
- summary: 对包含小 endian 表示形式整数的量程寄存器执行量程傅立叶转换。
  uid: Microsoft.Quantum.Canon.ApplyQuantumFourierTransform
- summary: 对包含大字节序表示形式整数的量程寄存器执行量程傅立叶转换。
  uid: Microsoft.Quantum.Canon.ApplyQuantumFourierTransformBE
- summary: >+
    > [!WARNING]

    > ApplyReversedOpBigEndianA 已被弃用。 请改用 <xref:Microsoft.Quantum.Arithmetic.ApplyReversedOpBEA>。

    >

    > 请使用 @"Microsoft.Quantum.Arithmetic.ApplyReversedOpBEA"。

  uid: Microsoft.Quantum.Canon.ApplyReversedOpBigEndianA
- summary: >+
    > [!WARNING]

    > ApplyReversedOpBigEndianC 已被弃用。 请改用 <xref:Microsoft.Quantum.Arithmetic.ApplyReversedOpBEC>。

    >

    > 请使用 @"Microsoft.Quantum.Arithmetic.ApplyReversedOpBEC"。

  uid: Microsoft.Quantum.Canon.ApplyReversedOpBigEndianC
- summary: >+
    > [!WARNING]

    > ApplyReversedOpBigEndianCA 已被弃用。 请改用 <xref:Microsoft.Quantum.Arithmetic.ApplyReversedOpBECA>。

    >

    > 请使用 @"Microsoft.Quantum.Arithmetic.ApplyReversedOpBEC"。

  uid: Microsoft.Quantum.Canon.ApplyReversedOpBigEndianCA
- summary: >+
    > [!WARNING]

    > ApplyReversedOpLittleEndianA 已被弃用。 请改用 <xref:Microsoft.Quantum.Arithmetic.ApplyReversedOpLEA>。

    >

    > 请使用 @"Microsoft.Quantum.Arithmetic.ApplyReversedOpLEA"。

  uid: Microsoft.Quantum.Canon.ApplyReversedOpLittleEndianA
- summary: >+
    > [!WARNING]

    > ApplyReversedOpLittleEndianC 已被弃用。 请改用 <xref:Microsoft.Quantum.Arithmetic.ApplyReversedOpLEC>。

    >

    > 请使用 @"Microsoft.Quantum.Arithmetic.ApplyReversedOpLEC"。

  uid: Microsoft.Quantum.Canon.ApplyReversedOpLittleEndianC
- summary: >+
    > [!WARNING]

    > ApplyReversedOpLittleEndianCA 已被弃用。 请改用 <xref:Microsoft.Quantum.Arithmetic.ApplyReversedOpLECA>。

    >

    > 请使用 @"Microsoft.Quantum.Arithmetic.ApplyReversedOpLEC"。

  uid: Microsoft.Quantum.Canon.ApplyReversedOpLittleEndianCA
- summary: >+
    > [!WARNING]

    > ApplyRippleCarryComparatorLE 已被弃用。 请改用 <xref:Microsoft.Quantum.Arithmetic.CompareUsingRippleCarry>。

    >

    > 请使用 @"Microsoft.Quantum.Arithmetic.CompareUsingRippleCarry"。

  uid: Microsoft.Quantum.Canon.ApplyRippleCarryComparatorLE
- summary: 在数组上按顺序应用 ops 及其目标的列表。
  uid: Microsoft.Quantum.Canon.ApplySeriesOfOps
- summary: '在数组上按顺序应用 ops 及其目标的列表。  (Adjoint) '
  uid: Microsoft.Quantum.Canon.ApplySeriesOfOpsA
- summary: '在数组上按顺序应用 ops 及其目标的列表。  (控制) '
  uid: Microsoft.Quantum.Canon.ApplySeriesOfOpsC
- summary: '在数组上按顺序应用 ops 及其目标的列表。  (Adjoint + 受控) '
  uid: Microsoft.Quantum.Canon.ApplySeriesOfOpsCA
- summary: 对寄存器中的每个元素应用 qubit 操作。
  uid: Microsoft.Quantum.Canon.ApplyToEach
- summary: 对寄存器中的每个元素应用 qubit 操作。 修饰符 `A` 指示 qubit 操作是 adjointable。
  uid: Microsoft.Quantum.Canon.ApplyToEachA
- summary: 对寄存器中的每个元素应用 qubit 操作。 修饰符 `C` 指示 qubit 操作可控制。
  uid: Microsoft.Quantum.Canon.ApplyToEachC
- summary: 对寄存器中的每个元素应用 qubit 操作。 修饰符 `CA` 指示 qubit 操作可控制和 adjointable。
  uid: Microsoft.Quantum.Canon.ApplyToEachCA
- summary: 将单 qubit 操作应用于寄存器中的每个索引元素。
  uid: Microsoft.Quantum.Canon.ApplyToEachIndex
- summary: 将单 qubit 操作应用于寄存器中的每个索引元素。 修饰符 `A` 指示 qubit 操作是 adjointable。
  uid: Microsoft.Quantum.Canon.ApplyToEachIndexA
- summary: 将单 qubit 操作应用于寄存器中的每个索引元素。 修饰符 `C` 指示 qubit 操作可控制。
  uid: Microsoft.Quantum.Canon.ApplyToEachIndexC
- summary: 将单 qubit 操作应用于寄存器中的每个索引元素。 修饰符 `CA` 指示 qubit 操作是 adjointable 和可控制的。
  uid: Microsoft.Quantum.Canon.ApplyToEachIndexCA
- summary: 将操作应用到数组的给定元素。
  uid: Microsoft.Quantum.Canon.ApplyToElement
- summary: 将操作应用到数组的给定元素。
  uid: Microsoft.Quantum.Canon.ApplyToElementA
- summary: 将操作应用到数组的给定元素。
  uid: Microsoft.Quantum.Canon.ApplyToElementC
- summary: 将操作应用到数组的给定元素。
  uid: Microsoft.Quantum.Canon.ApplyToElementCA
- summary: 将操作应用于寄存器中的第一个 qubit。
  uid: Microsoft.Quantum.Canon.ApplyToFirstQubit
- summary: 将操作应用于寄存器中的第一个 qubit。 修饰符 `A` 指示操作为 adjointable。
  uid: Microsoft.Quantum.Canon.ApplyToFirstQubitA
- summary: 将操作 op 应用于寄存器中的第一个 qubit。 修饰符 `C` 指示操作可控制。
  uid: Microsoft.Quantum.Canon.ApplyToFirstQubitC
- summary: 将操作 op 应用于寄存器中的第一个 qubit。 修饰符 `CA` 指示该操作是可控制的且 adjointable。
  uid: Microsoft.Quantum.Canon.ApplyToFirstQubitCA
- summary: 将操作应用于寄存器中的前三个 qubits。
  uid: Microsoft.Quantum.Canon.ApplyToFirstThreeQubits
- summary: 将操作应用于寄存器中的前三个 qubits。 修饰符 `A` 指示操作为 adjointable。
  uid: Microsoft.Quantum.Canon.ApplyToFirstThreeQubitsA
- summary: 将操作应用于寄存器中的前三个 qubits。 修饰符 `C` 指示操作可控制。
  uid: Microsoft.Quantum.Canon.ApplyToFirstThreeQubitsC
- summary: 将操作应用于寄存器中的前三个 qubits。 修饰符 `CA` 指示该操作是可控制的且 adjointable。
  uid: Microsoft.Quantum.Canon.ApplyToFirstThreeQubitsCA
- summary: 将操作应用于寄存器中的前两个 qubits。
  uid: Microsoft.Quantum.Canon.ApplyToFirstTwoQubits
- summary: 将操作应用于寄存器中的前两个 qubits。 修饰符 `A` 指示操作为 adjointable。
  uid: Microsoft.Quantum.Canon.ApplyToFirstTwoQubitsA
- summary: 将操作应用于寄存器中的前两个 qubits。 修饰符 `C` 指示操作可控制。
  uid: Microsoft.Quantum.Canon.ApplyToFirstTwoQubitsC
- summary: 将操作应用于寄存器中的前两个 qubits。 修饰符 `CA` 指示该操作是可控制的且 adjointable。
  uid: Microsoft.Quantum.Canon.ApplyToFirstTwoQubitsCA
- summary: 将操作应用到数组的第一个元素。
  uid: Microsoft.Quantum.Canon.ApplyToHead
- summary: 将操作应用到数组的第一个元素。
  uid: Microsoft.Quantum.Canon.ApplyToHeadA
- summary: 将操作应用到数组的第一个元素。
  uid: Microsoft.Quantum.Canon.ApplyToHeadC
- summary: 将操作应用到数组的第一个元素。
  uid: Microsoft.Quantum.Canon.ApplyToHeadCA
- summary: 将操作应用到数组中除最后一个元素之外的所有元素。
  uid: Microsoft.Quantum.Canon.ApplyToMost
- summary: 将操作应用到数组中除最后一个元素之外的所有元素。
  uid: Microsoft.Quantum.Canon.ApplyToMostA
- summary: 将操作应用到数组中除最后一个元素之外的所有元素。
  uid: Microsoft.Quantum.Canon.ApplyToMostC
- summary: 将操作应用到数组中除最后一个元素之外的所有元素。
  uid: Microsoft.Quantum.Canon.ApplyToMostCA
- summary: 将一对操作应用于寄存器的给定分区分为两部分。
  uid: Microsoft.Quantum.Canon.ApplyToPartition
- summary: 将一对操作应用于寄存器的给定分区分为两部分。 修饰符 `A` 指示操作为 adjointable。
  uid: Microsoft.Quantum.Canon.ApplyToPartitionA
- summary: 将一对操作应用于寄存器的给定分区分为两部分。 修饰符 `C` 指示操作可控制。
  uid: Microsoft.Quantum.Canon.ApplyToPartitionC
- summary: 将一对操作应用于寄存器的给定分区分为两部分。 修饰符 `CA` 指示该操作是可控制的且 adjointable。
  uid: Microsoft.Quantum.Canon.ApplyToPartitionCA
- summary: 将操作应用到数组中除第一个元素之外的所有元素。
  uid: Microsoft.Quantum.Canon.ApplyToRest
- summary: 将操作应用到数组中除第一个元素之外的所有元素。
  uid: Microsoft.Quantum.Canon.ApplyToRestA
- summary: 将操作应用到数组中除第一个元素之外的所有元素。
  uid: Microsoft.Quantum.Canon.ApplyToRestC
- summary: 将操作应用到数组中除第一个元素之外的所有元素。
  uid: Microsoft.Quantum.Canon.ApplyToRestCA
- summary: 将操作应用于寄存器的 subregister，其 qubits 由其索引数组指定。
  uid: Microsoft.Quantum.Canon.ApplyToSubregister
- summary: 将操作应用于寄存器的 subregister，其 qubits 由其索引数组指定。 修饰符 `A` 指示操作为 adjointable。
  uid: Microsoft.Quantum.Canon.ApplyToSubregisterA
- summary: 将操作应用于寄存器的 subregister，其 qubits 由其索引数组指定。 修饰符 `C` 指示操作可控制。
  uid: Microsoft.Quantum.Canon.ApplyToSubregisterC
- summary: 将操作应用于寄存器的 subregister，其 qubits 由其索引数组指定。 修饰符 `CA` 指示该操作是可控制的且 adjointable。
  uid: Microsoft.Quantum.Canon.ApplyToSubregisterCA
- summary: 将操作应用到数组的最后一个元素。
  uid: Microsoft.Quantum.Canon.ApplyToTail
- summary: 将操作应用到数组的最后一个元素。
  uid: Microsoft.Quantum.Canon.ApplyToTailA
- summary: 将操作应用到数组的最后一个元素。
  uid: Microsoft.Quantum.Canon.ApplyToTailC
- summary: 将操作应用到数组的最后一个元素。
  uid: Microsoft.Quantum.Canon.ApplyToTailCA
- summary: 给定两个操作，将一个操作应用到另一个运算。
  uid: Microsoft.Quantum.Canon.ApplyWith
- summary: 给定两个操作，将一个操作应用到另一个运算。
  uid: Microsoft.Quantum.Canon.ApplyWithA
- summary: 给定两个操作，将一个操作应用到另一个运算。
  uid: Microsoft.Quantum.Canon.ApplyWithC
- summary: 给定两个操作，将一个操作应用到另一个运算。
  uid: Microsoft.Quantum.Canon.ApplyWithCA
- summary: 给定接受某些输入的操作，返回与该操作兼容的输出的函数以及该函数的输入将使用函数将输入转换为操作所需的格式。
  uid: Microsoft.Quantum.Canon.ApplyWithInputTransformation
- summary: 给定接受某些输入的操作，返回与该操作兼容的输出的函数以及该函数的输入将使用函数将输入转换为操作所需的格式。
  uid: Microsoft.Quantum.Canon.ApplyWithInputTransformationA
- summary: 给定接受某些输入的操作，返回与该操作兼容的输出的函数以及该函数的输入将使用函数将输入转换为操作所需的格式。
  uid: Microsoft.Quantum.Canon.ApplyWithInputTransformationC
- summary: 给定接受某些输入的操作，返回与该操作兼容的输出的函数以及该函数的输入将使用函数将输入转换为操作所需的格式。
  uid: Microsoft.Quantum.Canon.ApplyWithInputTransformationCA
- summary: 将大致的量程傅立叶转换 (AQFT) 应用到一个量程寄存器。
  uid: Microsoft.Quantum.Canon.ApproximateQFT
- summary: 将一个复杂阶段数组应用于 qubits 寄存器的数字基础状态，根据给定的公差截断小旋转角度。
  uid: Microsoft.Quantum.Canon.ApproximatelyApplyDiagonalUnitary
- summary: 应用对 qubits 数组使用的 Pauli 旋转，根据给定的公差截断小旋转角度。
  uid: Microsoft.Quantum.Canon.ApproximatelyMultiplexPauli
- summary: 对 qubits 数组应用 Pauli Z 旋转，根据给定的公差截断小旋转角度。
  uid: Microsoft.Quantum.Canon.ApproximatelyMultiplexZ
- summary: >+
    > [!WARNING]

    > AssertHighestBit 已被弃用。 请改用 <xref:Microsoft.Quantum.Arithmetic.AssertMostSignificantBit>。

    >

    > 请使用 @"Microsoft.Quantum.Arithmetic.AssertMostSignificantBit"。

  uid: Microsoft.Quantum.Canon.AssertHighestBit
- summary: >+
    > [!WARNING]

    > AssertLessThanPhaseLE 已被弃用。 请改用 <xref:Microsoft.Quantum.Arithmetic.AssertPhaseLessThan>。

    >

    > 请使用 @"Microsoft.Quantum.Arithmetic.AssertPhaseLessThan"。

  uid: Microsoft.Quantum.Canon.AssertLessThanPhaseLE
- summary: >+
    > [!WARNING]

    > AssertPhase 已被弃用。 请改用 <xref:Microsoft.Quantum.Diagnostics.AssertPhase>。

  uid: Microsoft.Quantum.Canon.AssertPhase
- summary: >+
    > [!WARNING]

    > CNOTChain 已被弃用。 请改用 <xref:Microsoft.Quantum.Canon.ApplyCNOTChain>。

  uid: Microsoft.Quantum.Canon.CNOTChain
- summary: >+
    > [!WARNING]

    > CNOTChainTarget 已被弃用。 请改用 <xref:Microsoft.Quantum.Canon.ApplyCNOTChainWithTarget>。

  uid: Microsoft.Quantum.Canon.CNOTChainTarget
- summary: >-
    将受控-X (CX) 入口应用于一对 qubits。

    $ $ \begin{align} \left ( \begin{matrix} 1 & 0 & 0 & 0 \\ \\ 0 & 1 & 0 & 0 \\ \\ 0 & 0 & 0 & 1 \\ \\ 0 & 0 & 1 & 0 \end{matrix}\right) \end{align}，$ $，其中的行和列按 "量程概念" 指南进行组织。
  uid: Microsoft.Quantum.Canon.CX
- summary: >-
    将受控-Y (CY) 入口应用于一对 qubits。

    $ $ \begin{align} 1 & 0 & 0 & 0 \\ \\ 0 & 1 & 0 & 0 \\ \\ 0 & 0 & 0 &-i \\ \\ 0 & 0 & & 0 \end{align}，$ $，其中的行和列按 "量程概念" 指南进行组织。
  uid: Microsoft.Quantum.Canon.CY
- summary: >-
    将受控-Z (CZ) 入口应用于一对 qubits。

    $ $ \begin{align} 1 & 0 & 0 & 0 \\ \\ 0 & 1 & 0 & 0 \\ \\ 0 & 0 & 1 & 0 \\ \\ 0 & 0 & 0 &-1 \end{align}，$ $，其中的行和列组织为 "量程概念" 指南。
  uid: Microsoft.Quantum.Canon.CZ
- summary: >+
    > [!WARNING]

    > CascadeCCNOT 已被弃用。 请改用 <xref:Microsoft.Quantum.Canon.ApplyCCNOTChain>。

  uid: Microsoft.Quantum.Canon.CascadeCCNOT
- summary: >+
    > [!WARNING]

    > CascadeCNOT 已被弃用。 请改用 <xref:Microsoft.Quantum.Canon.ApplyCNOTChain>。

    >

    > 请使用 @"microsoft.quantum.canon.applycnotchain"。

  uid: Microsoft.Quantum.Canon.CascadeCNOT
- summary: 应用给定操作，延迟。
  uid: Microsoft.Quantum.Canon.Delay
- summary: 应用给定操作，延迟。
  uid: Microsoft.Quantum.Canon.DelayA
- summary: 应用给定操作，延迟。
  uid: Microsoft.Quantum.Canon.DelayC
- summary: 应用给定操作，延迟。
  uid: Microsoft.Quantum.Canon.DelayCA
- summary: >-
    将 Y 基础模拟应用于交换 Z 轴和 Y 轴的 Hadamard 转换。

    单个 qubit 上的 Y Hadamard 转换 $H _Y = S H $ 为： \begin{align} H_Y \mathrel{： =} \frac {1} {\sqrt {2} } \begin{bmatrix} 1 & 1 \\ \\ i &-i \end{bmatrix}。 \end{align}
  uid: Microsoft.Quantum.Canon.HY
- summary: >+
    > [!WARNING]

    > InPlaceMajority 已被弃用。 请改用 <xref:Microsoft.Quantum.Arithmetic.ApplyMajorityInPlace>。

    >

    > 请使用 @"microsoft.quantum.arithmetic.applymajorityinplace"。

  uid: Microsoft.Quantum.Canon.InPlaceMajority
- summary: >+
    > [!WARNING]

    > InPlaceXorBE 已被弃用。 请改用 <xref:ApplyReversedOpLECA(ApplyXorInPlace(value, _), target)>。

    >

    > 此操作已被删除。

  uid: Microsoft.Quantum.Canon.InPlaceXorBE
- summary: >+
    > [!WARNING]

    > InPlaceXorLE 已被弃用。 请改用 <xref:Microsoft.Quantum.Measurement.ApplyXorInPlace>。

    >

    > 请使用 @"Microsoft.Quantum.Measurement.ApplyXorInPlace"。

  uid: Microsoft.Quantum.Canon.InPlaceXorLE
- summary: >+
    > [!WARNING]

    > IntegerIncrementLE 已被弃用。 请改用 <xref:Microsoft.Quantum.Arithmetic.IncrementByInteger>。

    >

    > 请使用 @"Microsoft.Quantum.Arithmetic.IncrementByInteger"。

  uid: Microsoft.Quantum.Canon.IntegerIncrementLE
- summary: >+
    > [!WARNING]

    > IntegerIncrementPhaseLE 已被弃用。 请改用 <xref:Microsoft.Quantum.Arithmetic.IncrementPhaseByInteger>。

    >

    > 请使用 @"Microsoft.Quantum.Arithmetic.IncrementPhaseByInteger"。

  uid: Microsoft.Quantum.Canon.IntegerIncrementPhaseLE
- summary: 以整数范围的笛卡尔幂对每个索引应用操作。
  uid: Microsoft.Quantum.Canon.IterateThroughCartesianPower
- summary: 对若干范围内笛卡尔积中的每个索引应用操作。
  uid: Microsoft.Quantum.Canon.IterateThroughCartesianProduct
- summary: >+
    > [!WARNING]

    > ModularAddProductLE 已被弃用。 请改用 <xref:Microsoft.Quantum.Arithmetic.MultiplyAndAddByModularInteger>。

    >

    > 请使用 @"Microsoft.Quantum.Arithmetic.MultiplyAndAddByModularInteger"。

  uid: Microsoft.Quantum.Canon.ModularAddProductLE
- summary: >+
    > [!WARNING]

    > ModularAddProductPhaseLE 已被弃用。 请改用 <xref:Microsoft.Quantum.Arithmetic.MultiplyAndAddPhaseByModularInteger>。

    >

    > 请使用 @"Microsoft.Quantum.Arithmetic.MultiplyAndAddPhaseByModularInteger"。

  uid: Microsoft.Quantum.Canon.ModularAddProductPhaseLE
- summary: >+
    > [!WARNING]

    > ModularIncrementLE 已被弃用。 请改用 <xref:Microsoft.Quantum.Arithmetic.ModularIncrementByInteger>。

    >

    > 请使用 @"Microsoft.Quantum.Arithmetic.ModularIncrementByInteger"。

  uid: Microsoft.Quantum.Canon.ModularIncrementLE
- summary: >+
    > [!WARNING]

    > ModularIncrementPhaseLE 已被弃用。 请改用 <xref:Microsoft.Quantum.Arithmetic.IncrementPhaseByModularInteger>。

    >

    > 请使用 @"Microsoft.Quantum.Arithmetic.IncrementPhaseByModularInteger"。

  uid: Microsoft.Quantum.Canon.ModularIncrementPhaseLE
- summary: >+
    > [!WARNING]

    > ModularMultiplyByConstantLE 已被弃用。 请改用 <xref:Microsoft.Quantum.Arithmetic.MultiplyByModularInteger>。

    >

    > 请使用 @"Microsoft.Quantum.Arithmetic.MultiplyByModularInteger"。

  uid: Microsoft.Quantum.Canon.ModularMultiplyByConstantLE
- summary: >-
    应用由数值状态数组控制的操作的数组。

    也就是说，应用 $U $ 的乘法控制的单一操作，该操作在通过 $n $-qubit number state $ \ket{j} $ 控制时应用单一 $V _j $。

    $U = \sum ^ {2 ^ n-1} _ {j = 0} \ket{j}\bra{j}\otimes V_j $。
  uid: Microsoft.Quantum.Canon.MultiplexOperations
- summary: >-
    应用 $U $ 的乘法控制的单一操作，该操作将应用单一 $V _j $，由 n qubit number state $ \ket{j} $ 控制。

    $U = \sum ^ {N-1} _ {j = 0} \ket{j}\bra{j}\otimes V_j $。
  uid: Microsoft.Quantum.Canon.MultiplexOperationsBruteForceFromGenerator
- summary: >-
    应用 $U $ 的乘法控制的单一操作，该操作将应用单一 $V _j $，由 n qubit number state $ \ket{j} $ 控制。

    $U = \sum ^ {N-1} _ {j = 0} \ket{j}\bra{j}\otimes V_j $。
  uid: Microsoft.Quantum.Canon.MultiplexOperationsFromGenerator
- summary: 的实现步骤 `MultiplexOperationsFromGenerator` 。
  uid: Microsoft.Quantum.Canon.MultiplexOperationsFromGeneratorImpl
- summary: MultiplexOperations 的实现步骤。
  uid: Microsoft.Quantum.Canon.MultiplexOperationsWithAuxRegister
- summary: 对 qubits 数组应用 Pauli 旋转。
  uid: Microsoft.Quantum.Canon.MultiplexPauli
- summary: 对 qubits 数组应用 Pauli Z 旋转。
  uid: Microsoft.Quantum.Canon.MultiplexZ
- summary: 对参数执行 (no op) 的标识操作。
  uid: Microsoft.Quantum.Canon.NoOp
- summary: 使用交换操作 Permutes qubits。
  uid: Microsoft.Quantum.Canon.PermuteQubits
- summary: 对包含大字节序表示形式整数的量程寄存器执行量程傅立叶转换。
  uid: Microsoft.Quantum.Canon.QFT
- summary: 对包含小 endian 表示形式整数的量程寄存器执行量程傅立叶转换。
  uid: Microsoft.Quantum.Canon.QFTLE
- summary: >-
    执行阶段移位操作。

    $R = \boldone- (1-e ^ {i \phi} ) \ket{0\cdots 0} \bra{0\cdots 0} $。
  uid: Microsoft.Quantum.Canon.RAll0
- summary: >-
    执行阶段移位操作。

    $R = \boldone- (1-e ^ {i \phi} ) \ket{1\cdots 1} \bra{1\cdots 1} $。
  uid: Microsoft.Quantum.Canon.RAll1
- summary: 在给定的次数后重复操作。
  uid: Microsoft.Quantum.Canon.Repeat
- summary: 在给定的次数后重复操作。
  uid: Microsoft.Quantum.Canon.RepeatA
- summary: 在给定的次数后重复操作。
  uid: Microsoft.Quantum.Canon.RepeatC
- summary: 在给定的次数后重复操作。
  uid: Microsoft.Quantum.Canon.RepeatCA
- summary: 使用交换入口反转寄存器中 qubits 的顺序。
  uid: Microsoft.Quantum.Canon.SwapReverseRegister
- summary: 第一顺序 Trotter – Suzuki 集成器的实现。
  uid: Microsoft.Quantum.Canon.Trotter1ImplCA
- summary: 第二顺序 Trotter – Suzuki 集成器的实现。
  uid: Microsoft.Quantum.Canon.Trotter2ImplCA
- summary: 偶序 Trotter – Suzuki 集成器的递归实现。
  uid: Microsoft.Quantum.Canon.TrotterArbitraryImplCA
summary: ''
uid: Microsoft.Quantum.Canon
metadata:
  ms.openlocfilehash: c8bb0e87c5f22812587ed5eaefcddc4ad04b851b
  ms.sourcegitcommit: a87c1aa8e7453360025e47ba614f25b02ea84ec3
  ms.translationtype: MT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 11/26/2020
  ms.locfileid: "96204481"
